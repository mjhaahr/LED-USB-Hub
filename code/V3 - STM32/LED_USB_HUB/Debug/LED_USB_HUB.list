
LED_USB_HUB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000558c  080001f4  080001f4  000011f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005780  08005780  00006780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005800  08005800  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005800  08005800  00006800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005808  08005808  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005808  08005808  00006808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800580c  0800580c  0000680c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005810  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  2000000c  0800581c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  0800581c  000074cc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e27  00000000  00000000  00007042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f42  00000000  00000000  0001ee69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  00021db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f14  00000000  00000000  00023108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028fc5  00000000  00000000  0002401c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016dd6  00000000  00000000  0004cfe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108e1b  00000000  00000000  00063db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016cbd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000521c  00000000  00000000  0016cc18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00171e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	@ (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08005768 	.word	0x08005768

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	@ (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	@ (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	@ (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08005768 	.word	0x08005768

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000244:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000248:	f000 b9b0 	b.w	80005ac <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800026a:	4688      	mov	r8, r1
 800026c:	4604      	mov	r4, r0
 800026e:	468e      	mov	lr, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14a      	bne.n	800030a <__udivmoddi4+0xa6>
 8000274:	428a      	cmp	r2, r1
 8000276:	4617      	mov	r7, r2
 8000278:	d95f      	bls.n	800033a <__udivmoddi4+0xd6>
 800027a:	fab2 f682 	clz	r6, r2
 800027e:	b14e      	cbz	r6, 8000294 <__udivmoddi4+0x30>
 8000280:	f1c6 0320 	rsb	r3, r6, #32
 8000284:	fa01 fe06 	lsl.w	lr, r1, r6
 8000288:	40b7      	lsls	r7, r6
 800028a:	40b4      	lsls	r4, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	ea43 0e0e 	orr.w	lr, r3, lr
 8000294:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000298:	fa1f fc87 	uxth.w	ip, r7
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fbbe f1f8 	udiv	r1, lr, r8
 80002a2:	fb08 ee11 	mls	lr, r8, r1, lr
 80002a6:	fb01 f20c 	mul.w	r2, r1, ip
 80002aa:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d907      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b2:	18fb      	adds	r3, r7, r3
 80002b4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	429a      	cmp	r2, r3
 80002bc:	f200 8154 	bhi.w	8000568 <__udivmoddi4+0x304>
 80002c0:	4601      	mov	r1, r0
 80002c2:	1a9b      	subs	r3, r3, r2
 80002c4:	b2a2      	uxth	r2, r4
 80002c6:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ca:	fb08 3310 	mls	r3, r8, r0, r3
 80002ce:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80002d6:	4594      	cmp	ip, r2
 80002d8:	d90b      	bls.n	80002f2 <__udivmoddi4+0x8e>
 80002da:	18ba      	adds	r2, r7, r2
 80002dc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80002e0:	bf2c      	ite	cs
 80002e2:	2401      	movcs	r4, #1
 80002e4:	2400      	movcc	r4, #0
 80002e6:	4594      	cmp	ip, r2
 80002e8:	d902      	bls.n	80002f0 <__udivmoddi4+0x8c>
 80002ea:	2c00      	cmp	r4, #0
 80002ec:	f000 813f 	beq.w	800056e <__udivmoddi4+0x30a>
 80002f0:	4618      	mov	r0, r3
 80002f2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f6:	eba2 020c 	sub.w	r2, r2, ip
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa2>
 80002fe:	40f2      	lsrs	r2, r6
 8000300:	2300      	movs	r3, #0
 8000302:	e9c5 2300 	strd	r2, r3, [r5]
 8000306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xb6>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb0>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa2>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d14e      	bne.n	80003c0 <__udivmoddi4+0x15c>
 8000322:	4543      	cmp	r3, r8
 8000324:	f0c0 8112 	bcc.w	800054c <__udivmoddi4+0x2e8>
 8000328:	4282      	cmp	r2, r0
 800032a:	f240 810f 	bls.w	800054c <__udivmoddi4+0x2e8>
 800032e:	4608      	mov	r0, r1
 8000330:	2d00      	cmp	r5, #0
 8000332:	d0e8      	beq.n	8000306 <__udivmoddi4+0xa2>
 8000334:	e9c5 4e00 	strd	r4, lr, [r5]
 8000338:	e7e5      	b.n	8000306 <__udivmoddi4+0xa2>
 800033a:	2a00      	cmp	r2, #0
 800033c:	f000 80ac 	beq.w	8000498 <__udivmoddi4+0x234>
 8000340:	fab2 f682 	clz	r6, r2
 8000344:	2e00      	cmp	r6, #0
 8000346:	f040 80bb 	bne.w	80004c0 <__udivmoddi4+0x25c>
 800034a:	1a8b      	subs	r3, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b2bc      	uxth	r4, r7
 8000352:	2101      	movs	r1, #1
 8000354:	0c02      	lsrs	r2, r0, #16
 8000356:	b280      	uxth	r0, r0
 8000358:	fbb3 fcfe 	udiv	ip, r3, lr
 800035c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000360:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000364:	fb04 f20c 	mul.w	r2, r4, ip
 8000368:	429a      	cmp	r2, r3
 800036a:	d90e      	bls.n	800038a <__udivmoddi4+0x126>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	429a      	cmp	r2, r3
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80ec 	beq.w	8000560 <__udivmoddi4+0x2fc>
 8000388:	46c4      	mov	ip, r8
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	fbb3 f8fe 	udiv	r8, r3, lr
 8000390:	fb0e 3318 	mls	r3, lr, r8, r3
 8000394:	fb04 f408 	mul.w	r4, r4, r8
 8000398:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800039c:	4294      	cmp	r4, r2
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x154>
 80003a0:	18ba      	adds	r2, r7, r2
 80003a2:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80003a6:	bf2c      	ite	cs
 80003a8:	2001      	movcs	r0, #1
 80003aa:	2000      	movcc	r0, #0
 80003ac:	4294      	cmp	r4, r2
 80003ae:	d902      	bls.n	80003b6 <__udivmoddi4+0x152>
 80003b0:	2800      	cmp	r0, #0
 80003b2:	f000 80d1 	beq.w	8000558 <__udivmoddi4+0x2f4>
 80003b6:	4698      	mov	r8, r3
 80003b8:	1b12      	subs	r2, r2, r4
 80003ba:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80003be:	e79d      	b.n	80002fc <__udivmoddi4+0x98>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa08 f401 	lsl.w	r4, r8, r1
 80003ca:	fa00 f901 	lsl.w	r9, r0, r1
 80003ce:	fa22 f706 	lsr.w	r7, r2, r6
 80003d2:	fa28 f806 	lsr.w	r8, r8, r6
 80003d6:	408a      	lsls	r2, r1
 80003d8:	431f      	orrs	r7, r3
 80003da:	fa20 f306 	lsr.w	r3, r0, r6
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	4323      	orrs	r3, r4
 80003e2:	fa1f fc87 	uxth.w	ip, r7
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fbb8 fef0 	udiv	lr, r8, r0
 80003ec:	fb00 881e 	mls	r8, r0, lr, r8
 80003f0:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80003f4:	fb0e f80c 	mul.w	r8, lr, ip
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d90e      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	45a0      	cmp	r8, r4
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 80b8 	beq.w	8000588 <__udivmoddi4+0x324>
 8000418:	46d6      	mov	lr, sl
 800041a:	eba4 0408 	sub.w	r4, r4, r8
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	fbb4 f3f0 	udiv	r3, r4, r0
 8000426:	fb00 4413 	mls	r4, r0, r3, r4
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000432:	45a4      	cmp	ip, r4
 8000434:	d90e      	bls.n	8000454 <__udivmoddi4+0x1f0>
 8000436:	193c      	adds	r4, r7, r4
 8000438:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800043c:	bf2c      	ite	cs
 800043e:	f04f 0801 	movcs.w	r8, #1
 8000442:	f04f 0800 	movcc.w	r8, #0
 8000446:	45a4      	cmp	ip, r4
 8000448:	d903      	bls.n	8000452 <__udivmoddi4+0x1ee>
 800044a:	f1b8 0f00 	cmp.w	r8, #0
 800044e:	f000 809f 	beq.w	8000590 <__udivmoddi4+0x32c>
 8000452:	4603      	mov	r3, r0
 8000454:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000458:	eba4 040c 	sub.w	r4, r4, ip
 800045c:	fba0 ec02 	umull	lr, ip, r0, r2
 8000460:	4564      	cmp	r4, ip
 8000462:	4673      	mov	r3, lr
 8000464:	46e0      	mov	r8, ip
 8000466:	d302      	bcc.n	800046e <__udivmoddi4+0x20a>
 8000468:	d107      	bne.n	800047a <__udivmoddi4+0x216>
 800046a:	45f1      	cmp	r9, lr
 800046c:	d205      	bcs.n	800047a <__udivmoddi4+0x216>
 800046e:	ebbe 0302 	subs.w	r3, lr, r2
 8000472:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000476:	3801      	subs	r0, #1
 8000478:	46e0      	mov	r8, ip
 800047a:	b15d      	cbz	r5, 8000494 <__udivmoddi4+0x230>
 800047c:	ebb9 0203 	subs.w	r2, r9, r3
 8000480:	eb64 0408 	sbc.w	r4, r4, r8
 8000484:	fa04 f606 	lsl.w	r6, r4, r6
 8000488:	fa22 f301 	lsr.w	r3, r2, r1
 800048c:	40cc      	lsrs	r4, r1
 800048e:	431e      	orrs	r6, r3
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e736      	b.n	8000306 <__udivmoddi4+0xa2>
 8000498:	fbb1 fcf2 	udiv	ip, r1, r2
 800049c:	0c01      	lsrs	r1, r0, #16
 800049e:	4614      	mov	r4, r2
 80004a0:	b280      	uxth	r0, r0
 80004a2:	4696      	mov	lr, r2
 80004a4:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004a8:	2620      	movs	r6, #32
 80004aa:	4690      	mov	r8, r2
 80004ac:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004b0:	4610      	mov	r0, r2
 80004b2:	fbb1 f1f2 	udiv	r1, r1, r2
 80004b6:	eba3 0308 	sub.w	r3, r3, r8
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	e74b      	b.n	8000358 <__udivmoddi4+0xf4>
 80004c0:	40b7      	lsls	r7, r6
 80004c2:	f1c6 0320 	rsb	r3, r6, #32
 80004c6:	fa01 f206 	lsl.w	r2, r1, r6
 80004ca:	fa21 f803 	lsr.w	r8, r1, r3
 80004ce:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d2:	fa20 f303 	lsr.w	r3, r0, r3
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	40b0      	lsls	r0, r6
 80004da:	4313      	orrs	r3, r2
 80004dc:	0c02      	lsrs	r2, r0, #16
 80004de:	0c19      	lsrs	r1, r3, #16
 80004e0:	b280      	uxth	r0, r0
 80004e2:	fbb8 f9fe 	udiv	r9, r8, lr
 80004e6:	fb0e 8819 	mls	r8, lr, r9, r8
 80004ea:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	4588      	cmp	r8, r1
 80004f4:	d951      	bls.n	800059a <__udivmoddi4+0x336>
 80004f6:	1879      	adds	r1, r7, r1
 80004f8:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 80004fc:	bf2c      	ite	cs
 80004fe:	f04f 0a01 	movcs.w	sl, #1
 8000502:	f04f 0a00 	movcc.w	sl, #0
 8000506:	4588      	cmp	r8, r1
 8000508:	d902      	bls.n	8000510 <__udivmoddi4+0x2ac>
 800050a:	f1ba 0f00 	cmp.w	sl, #0
 800050e:	d031      	beq.n	8000574 <__udivmoddi4+0x310>
 8000510:	eba1 0108 	sub.w	r1, r1, r8
 8000514:	fbb1 f9fe 	udiv	r9, r1, lr
 8000518:	fb09 f804 	mul.w	r8, r9, r4
 800051c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000520:	b29b      	uxth	r3, r3
 8000522:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000526:	4543      	cmp	r3, r8
 8000528:	d235      	bcs.n	8000596 <__udivmoddi4+0x332>
 800052a:	18fb      	adds	r3, r7, r3
 800052c:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000530:	bf2c      	ite	cs
 8000532:	f04f 0a01 	movcs.w	sl, #1
 8000536:	f04f 0a00 	movcc.w	sl, #0
 800053a:	4543      	cmp	r3, r8
 800053c:	d2bb      	bcs.n	80004b6 <__udivmoddi4+0x252>
 800053e:	f1ba 0f00 	cmp.w	sl, #0
 8000542:	d1b8      	bne.n	80004b6 <__udivmoddi4+0x252>
 8000544:	f1a9 0102 	sub.w	r1, r9, #2
 8000548:	443b      	add	r3, r7
 800054a:	e7b4      	b.n	80004b6 <__udivmoddi4+0x252>
 800054c:	1a84      	subs	r4, r0, r2
 800054e:	eb68 0203 	sbc.w	r2, r8, r3
 8000552:	2001      	movs	r0, #1
 8000554:	4696      	mov	lr, r2
 8000556:	e6eb      	b.n	8000330 <__udivmoddi4+0xcc>
 8000558:	443a      	add	r2, r7
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	e72b      	b.n	80003b8 <__udivmoddi4+0x154>
 8000560:	f1ac 0c02 	sub.w	ip, ip, #2
 8000564:	443b      	add	r3, r7
 8000566:	e710      	b.n	800038a <__udivmoddi4+0x126>
 8000568:	3902      	subs	r1, #2
 800056a:	443b      	add	r3, r7
 800056c:	e6a9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800056e:	443a      	add	r2, r7
 8000570:	3802      	subs	r0, #2
 8000572:	e6be      	b.n	80002f2 <__udivmoddi4+0x8e>
 8000574:	eba7 0808 	sub.w	r8, r7, r8
 8000578:	f1a9 0c02 	sub.w	ip, r9, #2
 800057c:	4441      	add	r1, r8
 800057e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000582:	fb09 f804 	mul.w	r8, r9, r4
 8000586:	e7c9      	b.n	800051c <__udivmoddi4+0x2b8>
 8000588:	f1ae 0e02 	sub.w	lr, lr, #2
 800058c:	443c      	add	r4, r7
 800058e:	e744      	b.n	800041a <__udivmoddi4+0x1b6>
 8000590:	3b02      	subs	r3, #2
 8000592:	443c      	add	r4, r7
 8000594:	e75e      	b.n	8000454 <__udivmoddi4+0x1f0>
 8000596:	4649      	mov	r1, r9
 8000598:	e78d      	b.n	80004b6 <__udivmoddi4+0x252>
 800059a:	eba1 0108 	sub.w	r1, r1, r8
 800059e:	46cc      	mov	ip, r9
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7b8      	b.n	800051c <__udivmoddi4+0x2b8>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005b6:	2300      	movs	r3, #0
 80005b8:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80005ba:	2004      	movs	r0, #4
 80005bc:	f000 f8df 	bl	800077e <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80005c0:	f004 ffce 	bl	8005560 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005c4:	2007      	movs	r0, #7
 80005c6:	f004 ff29 	bl	800541c <HAL_InitTick>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d002      	beq.n	80005d6 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80005d0:	2301      	movs	r3, #1
 80005d2:	71fb      	strb	r3, [r7, #7]
 80005d4:	e001      	b.n	80005da <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005d6:	f004 fd2f 	bl	8005038 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005da:	79fb      	ldrb	r3, [r7, #7]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <HAL_IncTick+0x20>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <HAL_IncTick+0x24>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	4a04      	ldr	r2, [pc, #16]	@ (8000608 <HAL_IncTick+0x24>)
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20000004 	.word	0x20000004
 8000608:	20000028 	.word	0x20000028

0800060c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return uwTick;
 8000610:	4b03      	ldr	r3, [pc, #12]	@ (8000620 <HAL_GetTick+0x14>)
 8000612:	681b      	ldr	r3, [r3, #0]
}
 8000614:	4618      	mov	r0, r3
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20000028 	.word	0x20000028

08000624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000634:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <__NVIC_SetPriorityGrouping+0x44>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000640:	4013      	ands	r3, r2
 8000642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000656:	4a04      	ldr	r2, [pc, #16]	@ (8000668 <__NVIC_SetPriorityGrouping+0x44>)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	60d3      	str	r3, [r2, #12]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000670:	4b04      	ldr	r3, [pc, #16]	@ (8000684 <__NVIC_GetPriorityGrouping+0x18>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	f003 0307 	and.w	r3, r3, #7
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	2b00      	cmp	r3, #0
 8000698:	db0b      	blt.n	80006b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	f003 021f 	and.w	r2, r3, #31
 80006a0:	4907      	ldr	r1, [pc, #28]	@ (80006c0 <__NVIC_EnableIRQ+0x38>)
 80006a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a6:	095b      	lsrs	r3, r3, #5
 80006a8:	2001      	movs	r0, #1
 80006aa:	fa00 f202 	lsl.w	r2, r0, r2
 80006ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e100 	.word	0xe000e100

080006c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	6039      	str	r1, [r7, #0]
 80006ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	db0a      	blt.n	80006ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	490c      	ldr	r1, [pc, #48]	@ (8000710 <__NVIC_SetPriority+0x4c>)
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	0152      	lsls	r2, r2, #5
 80006e4:	b2d2      	uxtb	r2, r2
 80006e6:	440b      	add	r3, r1
 80006e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ec:	e00a      	b.n	8000704 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4908      	ldr	r1, [pc, #32]	@ (8000714 <__NVIC_SetPriority+0x50>)
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	f003 030f 	and.w	r3, r3, #15
 80006fa:	3b04      	subs	r3, #4
 80006fc:	0152      	lsls	r2, r2, #5
 80006fe:	b2d2      	uxtb	r2, r2
 8000700:	440b      	add	r3, r1
 8000702:	761a      	strb	r2, [r3, #24]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	e000e100 	.word	0xe000e100
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000718:	b480      	push	{r7}
 800071a:	b089      	sub	sp, #36	@ 0x24
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	f1c3 0307 	rsb	r3, r3, #7
 8000732:	2b03      	cmp	r3, #3
 8000734:	bf28      	it	cs
 8000736:	2303      	movcs	r3, #3
 8000738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	3303      	adds	r3, #3
 800073e:	2b06      	cmp	r3, #6
 8000740:	d902      	bls.n	8000748 <NVIC_EncodePriority+0x30>
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3b04      	subs	r3, #4
 8000746:	e000      	b.n	800074a <NVIC_EncodePriority+0x32>
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000750:	69bb      	ldr	r3, [r7, #24]
 8000752:	fa02 f303 	lsl.w	r3, r2, r3
 8000756:	43da      	mvns	r2, r3
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	401a      	ands	r2, r3
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000760:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	fa01 f303 	lsl.w	r3, r1, r3
 800076a:	43d9      	mvns	r1, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	4313      	orrs	r3, r2
         );
}
 8000772:	4618      	mov	r0, r3
 8000774:	3724      	adds	r7, #36	@ 0x24
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff ff4c 	bl	8000624 <__NVIC_SetPriorityGrouping>
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
 80007a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007a2:	f7ff ff63 	bl	800066c <__NVIC_GetPriorityGrouping>
 80007a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	68b9      	ldr	r1, [r7, #8]
 80007ac:	6978      	ldr	r0, [r7, #20]
 80007ae:	f7ff ffb3 	bl	8000718 <NVIC_EncodePriority>
 80007b2:	4602      	mov	r2, r0
 80007b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b8:	4611      	mov	r1, r2
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ff82 	bl	80006c4 <__NVIC_SetPriority>
}
 80007c0:	bf00      	nop
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff56 	bl	8000688 <__NVIC_EnableIRQ>
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b087      	sub	sp, #28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80007f2:	e158      	b.n	8000aa6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	2101      	movs	r1, #1
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000800:	4013      	ands	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2b00      	cmp	r3, #0
 8000808:	f000 814a 	beq.w	8000aa0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	f003 0303 	and.w	r3, r3, #3
 8000814:	2b01      	cmp	r3, #1
 8000816:	d005      	beq.n	8000824 <HAL_GPIO_Init+0x40>
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	f003 0303 	and.w	r3, r3, #3
 8000820:	2b02      	cmp	r3, #2
 8000822:	d130      	bne.n	8000886 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	2203      	movs	r2, #3
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	43db      	mvns	r3, r3
 8000836:	693a      	ldr	r2, [r7, #16]
 8000838:	4013      	ands	r3, r2
 800083a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	68da      	ldr	r2, [r3, #12]
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	fa02 f303 	lsl.w	r3, r2, r3
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	4313      	orrs	r3, r2
 800084c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	693a      	ldr	r2, [r7, #16]
 8000852:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800085a:	2201      	movs	r2, #1
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	43db      	mvns	r3, r3
 8000864:	693a      	ldr	r2, [r7, #16]
 8000866:	4013      	ands	r3, r2
 8000868:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	091b      	lsrs	r3, r3, #4
 8000870:	f003 0201 	and.w	r2, r3, #1
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	4313      	orrs	r3, r2
 800087e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	f003 0303 	and.w	r3, r3, #3
 800088e:	2b03      	cmp	r3, #3
 8000890:	d017      	beq.n	80008c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	68db      	ldr	r3, [r3, #12]
 8000896:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	2203      	movs	r2, #3
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43db      	mvns	r3, r3
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	4013      	ands	r3, r2
 80008a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	689a      	ldr	r2, [r3, #8]
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f003 0303 	and.w	r3, r3, #3
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d123      	bne.n	8000916 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	08da      	lsrs	r2, r3, #3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3208      	adds	r2, #8
 80008d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	220f      	movs	r2, #15
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	43db      	mvns	r3, r3
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	4013      	ands	r3, r2
 80008f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	691a      	ldr	r2, [r3, #16]
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	f003 0307 	and.w	r3, r3, #7
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	4313      	orrs	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	08da      	lsrs	r2, r3, #3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3208      	adds	r2, #8
 8000910:	6939      	ldr	r1, [r7, #16]
 8000912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	2203      	movs	r2, #3
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4013      	ands	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	f003 0203 	and.w	r2, r3, #3
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	4313      	orrs	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000952:	2b00      	cmp	r3, #0
 8000954:	f000 80a4 	beq.w	8000aa0 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000958:	4a5a      	ldr	r2, [pc, #360]	@ (8000ac4 <HAL_GPIO_Init+0x2e0>)
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	089b      	lsrs	r3, r3, #2
 800095e:	3318      	adds	r3, #24
 8000960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000964:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	f003 0303 	and.w	r3, r3, #3
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	220f      	movs	r2, #15
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	43db      	mvns	r3, r3
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	4013      	ands	r3, r2
 800097a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a52      	ldr	r2, [pc, #328]	@ (8000ac8 <HAL_GPIO_Init+0x2e4>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d025      	beq.n	80009d0 <HAL_GPIO_Init+0x1ec>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a51      	ldr	r2, [pc, #324]	@ (8000acc <HAL_GPIO_Init+0x2e8>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d01f      	beq.n	80009cc <HAL_GPIO_Init+0x1e8>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a50      	ldr	r2, [pc, #320]	@ (8000ad0 <HAL_GPIO_Init+0x2ec>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d019      	beq.n	80009c8 <HAL_GPIO_Init+0x1e4>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a4f      	ldr	r2, [pc, #316]	@ (8000ad4 <HAL_GPIO_Init+0x2f0>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d013      	beq.n	80009c4 <HAL_GPIO_Init+0x1e0>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a4e      	ldr	r2, [pc, #312]	@ (8000ad8 <HAL_GPIO_Init+0x2f4>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d00d      	beq.n	80009c0 <HAL_GPIO_Init+0x1dc>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a4d      	ldr	r2, [pc, #308]	@ (8000adc <HAL_GPIO_Init+0x2f8>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d007      	beq.n	80009bc <HAL_GPIO_Init+0x1d8>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a4c      	ldr	r2, [pc, #304]	@ (8000ae0 <HAL_GPIO_Init+0x2fc>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d101      	bne.n	80009b8 <HAL_GPIO_Init+0x1d4>
 80009b4:	2306      	movs	r3, #6
 80009b6:	e00c      	b.n	80009d2 <HAL_GPIO_Init+0x1ee>
 80009b8:	2307      	movs	r3, #7
 80009ba:	e00a      	b.n	80009d2 <HAL_GPIO_Init+0x1ee>
 80009bc:	2305      	movs	r3, #5
 80009be:	e008      	b.n	80009d2 <HAL_GPIO_Init+0x1ee>
 80009c0:	2304      	movs	r3, #4
 80009c2:	e006      	b.n	80009d2 <HAL_GPIO_Init+0x1ee>
 80009c4:	2303      	movs	r3, #3
 80009c6:	e004      	b.n	80009d2 <HAL_GPIO_Init+0x1ee>
 80009c8:	2302      	movs	r3, #2
 80009ca:	e002      	b.n	80009d2 <HAL_GPIO_Init+0x1ee>
 80009cc:	2301      	movs	r3, #1
 80009ce:	e000      	b.n	80009d2 <HAL_GPIO_Init+0x1ee>
 80009d0:	2300      	movs	r3, #0
 80009d2:	697a      	ldr	r2, [r7, #20]
 80009d4:	f002 0203 	and.w	r2, r2, #3
 80009d8:	00d2      	lsls	r2, r2, #3
 80009da:	4093      	lsls	r3, r2
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4313      	orrs	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80009e2:	4938      	ldr	r1, [pc, #224]	@ (8000ac4 <HAL_GPIO_Init+0x2e0>)
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	089b      	lsrs	r3, r3, #2
 80009e8:	3318      	adds	r3, #24
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009f0:	4b34      	ldr	r3, [pc, #208]	@ (8000ac4 <HAL_GPIO_Init+0x2e0>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	43db      	mvns	r3, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d003      	beq.n	8000a14 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a14:	4a2b      	ldr	r2, [pc, #172]	@ (8000ac4 <HAL_GPIO_Init+0x2e0>)
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac4 <HAL_GPIO_Init+0x2e0>)
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	43db      	mvns	r3, r3
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	4013      	ands	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d003      	beq.n	8000a3e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a3e:	4a21      	ldr	r2, [pc, #132]	@ (8000ac4 <HAL_GPIO_Init+0x2e0>)
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a44:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac4 <HAL_GPIO_Init+0x2e0>)
 8000a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d003      	beq.n	8000a6a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a6a:	4a16      	ldr	r2, [pc, #88]	@ (8000ac4 <HAL_GPIO_Init+0x2e0>)
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8000a72:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <HAL_GPIO_Init+0x2e0>)
 8000a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac4 <HAL_GPIO_Init+0x2e0>)
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	f47f ae9f 	bne.w	80007f4 <HAL_GPIO_Init+0x10>
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	bf00      	nop
 8000aba:	371c      	adds	r7, #28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	4002f400 	.word	0x4002f400
 8000ac8:	42020000 	.word	0x42020000
 8000acc:	42020400 	.word	0x42020400
 8000ad0:	42020800 	.word	0x42020800
 8000ad4:	42020c00 	.word	0x42020c00
 8000ad8:	42021000 	.word	0x42021000
 8000adc:	42021400 	.word	0x42021400
 8000ae0:	42021800 	.word	0x42021800

08000ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	460b      	mov	r3, r1
 8000aee:	807b      	strh	r3, [r7, #2]
 8000af0:	4613      	mov	r3, r2
 8000af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000af4:	787b      	ldrb	r3, [r7, #1]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d003      	beq.n	8000b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000afa:	887a      	ldrh	r2, [r7, #2]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b00:	e002      	b.n	8000b08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b02:	887a      	ldrh	r2, [r7, #2]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000b20:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d002      	beq.n	8000b32 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	73fb      	strb	r3, [r7, #15]
 8000b30:	e007      	b.n	8000b42 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8000b32:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f023 0204 	bic.w	r2, r3, #4
 8000b3a:	4905      	ldr	r1, [pc, #20]	@ (8000b50 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	600b      	str	r3, [r1, #0]
  }

  return status;
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	40030400 	.word	0x40030400

08000b54 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000b58:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <HAL_ICACHE_Enable+0x1c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a04      	ldr	r2, [pc, #16]	@ (8000b70 <HAL_ICACHE_Enable+0x1c>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	40030400 	.word	0x40030400

08000b74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d101      	bne.n	8000b86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e0c0      	b.n	8000d08 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d106      	bne.n	8000ba0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f004 fbb0 	bl	8005300 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f003 fe7b 	bl	80048a8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	73fb      	strb	r3, [r7, #15]
 8000bb6:	e03e      	b.n	8000c36 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000bb8:	7bfa      	ldrb	r2, [r7, #15]
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	4413      	add	r3, r2
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	440b      	add	r3, r1
 8000bc6:	3311      	adds	r3, #17
 8000bc8:	2201      	movs	r2, #1
 8000bca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000bcc:	7bfa      	ldrb	r2, [r7, #15]
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	440b      	add	r3, r1
 8000bda:	3310      	adds	r3, #16
 8000bdc:	7bfa      	ldrb	r2, [r7, #15]
 8000bde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000be0:	7bfa      	ldrb	r2, [r7, #15]
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	4613      	mov	r3, r2
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	4413      	add	r3, r2
 8000bea:	00db      	lsls	r3, r3, #3
 8000bec:	440b      	add	r3, r1
 8000bee:	3313      	adds	r3, #19
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000bf4:	7bfa      	ldrb	r2, [r7, #15]
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4413      	add	r3, r2
 8000bfe:	00db      	lsls	r3, r3, #3
 8000c00:	440b      	add	r3, r1
 8000c02:	3320      	adds	r3, #32
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c08:	7bfa      	ldrb	r2, [r7, #15]
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	4413      	add	r3, r2
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	440b      	add	r3, r1
 8000c16:	3324      	adds	r3, #36	@ 0x24
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	1c5a      	adds	r2, r3, #1
 8000c22:	4613      	mov	r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	4413      	add	r3, r2
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	440b      	add	r3, r1
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	3301      	adds	r3, #1
 8000c34:	73fb      	strb	r3, [r7, #15]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	791b      	ldrb	r3, [r3, #4]
 8000c3a:	7bfa      	ldrb	r2, [r7, #15]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d3bb      	bcc.n	8000bb8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	73fb      	strb	r3, [r7, #15]
 8000c44:	e044      	b.n	8000cd0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c46:	7bfa      	ldrb	r2, [r7, #15]
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4413      	add	r3, r2
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	440b      	add	r3, r1
 8000c54:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c5c:	7bfa      	ldrb	r2, [r7, #15]
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	4613      	mov	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	440b      	add	r3, r1
 8000c6a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000c6e:	7bfa      	ldrb	r2, [r7, #15]
 8000c70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c72:	7bfa      	ldrb	r2, [r7, #15]
 8000c74:	6879      	ldr	r1, [r7, #4]
 8000c76:	4613      	mov	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4413      	add	r3, r2
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	440b      	add	r3, r1
 8000c80:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c88:	7bfa      	ldrb	r2, [r7, #15]
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	00db      	lsls	r3, r3, #3
 8000c94:	440b      	add	r3, r1
 8000c96:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ca0:	6879      	ldr	r1, [r7, #4]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	440b      	add	r3, r1
 8000cac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000cb4:	7bfa      	ldrb	r2, [r7, #15]
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4413      	add	r3, r2
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	440b      	add	r3, r1
 8000cc2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	73fb      	strb	r3, [r7, #15]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	791b      	ldrb	r3, [r3, #4]
 8000cd4:	7bfa      	ldrb	r2, [r7, #15]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d3b5      	bcc.n	8000c46 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6818      	ldr	r0, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000ce6:	f003 fdfa 	bl	80048de <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7a9b      	ldrb	r3, [r3, #10]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d102      	bne.n	8000d06 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f000 f805 	bl	8000d10 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2201      	movs	r2, #1
 8000d22:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	f043 0302 	orr.w	r3, r3, #2
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000d68:	4b04      	ldr	r3, [pc, #16]	@ (8000d7c <HAL_PWREx_GetVoltageRange+0x18>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40007000 	.word	0x40007000

08000d80 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8000d88:	4b27      	ldr	r3, [pc, #156]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d90:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8000d92:	f000 f871 	bl	8000e78 <HAL_PWREx_SMPS_GetEffectiveMode>
 8000d96:	4603      	mov	r3, r0
 8000d98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000d9c:	d101      	bne.n	8000da2 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e03e      	b.n	8000e20 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8000da2:	4b21      	ldr	r3, [pc, #132]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000daa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000dae:	d101      	bne.n	8000db4 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e035      	b.n	8000e20 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000db4:	68ba      	ldr	r2, [r7, #8]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d101      	bne.n	8000dc0 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	e02f      	b.n	8000e20 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000dc0:	4b19      	ldr	r3, [pc, #100]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8000dc8:	4917      	ldr	r1, [pc, #92]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	@ (8000e2c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	095b      	lsrs	r3, r3, #5
 8000dd6:	4a16      	ldr	r2, [pc, #88]	@ (8000e30 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ddc:	09db      	lsrs	r3, r3, #7
 8000dde:	2232      	movs	r2, #50	@ 0x32
 8000de0:	fb02 f303 	mul.w	r3, r2, r3
 8000de4:	4a13      	ldr	r2, [pc, #76]	@ (8000e34 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8000de6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dea:	08db      	lsrs	r3, r3, #3
 8000dec:	3301      	adds	r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000df0:	e002      	b.n	8000df8 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000df8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e04:	d102      	bne.n	8000e0c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1f2      	bne.n	8000df2 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e18:	d101      	bne.n	8000e1e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e000      	b.n	8000e20 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40007000 	.word	0x40007000
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	0a7c5ac5 	.word	0x0a7c5ac5
 8000e34:	cccccccd 	.word	0xcccccccd

08000e38 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8000e3c:	4b05      	ldr	r3, [pc, #20]	@ (8000e54 <HAL_PWREx_EnableVddUSB+0x1c>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	4a04      	ldr	r2, [pc, #16]	@ (8000e54 <HAL_PWREx_EnableVddUSB+0x1c>)
 8000e42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e46:	6053      	str	r3, [r2, #4]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40007000 	.word	0x40007000

08000e58 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000e5c:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	4a04      	ldr	r2, [pc, #16]	@ (8000e74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000e62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e66:	6093      	str	r3, [r2, #8]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40007000 	.word	0x40007000

08000e78 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8000e8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	e00a      	b.n	8000eac <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d103      	bne.n	8000ea8 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8000ea0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	e001      	b.n	8000eac <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8000eac:	687b      	ldr	r3, [r7, #4]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40007000 	.word	0x40007000

08000ec0 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d102      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	f000 bcc2 	b.w	8001858 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ed4:	4b99      	ldr	r3, [pc, #612]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	f003 030c 	and.w	r3, r3, #12
 8000edc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ede:	4b97      	ldr	r3, [pc, #604]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0310 	and.w	r3, r3, #16
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 80e9 	beq.w	80010c8 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <HAL_RCC_OscConfig+0x4a>
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	2b0c      	cmp	r3, #12
 8000f00:	f040 8083 	bne.w	800100a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d17f      	bne.n	800100a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f0a:	4b8c      	ldr	r3, [pc, #560]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d006      	beq.n	8000f24 <HAL_RCC_OscConfig+0x64>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d102      	bne.n	8000f24 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	f000 bc9a 	b.w	8001858 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f28:	4b84      	ldr	r3, [pc, #528]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0308 	and.w	r3, r3, #8
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d004      	beq.n	8000f3e <HAL_RCC_OscConfig+0x7e>
 8000f34:	4b81      	ldr	r3, [pc, #516]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f3c:	e005      	b.n	8000f4a <HAL_RCC_OscConfig+0x8a>
 8000f3e:	4b7f      	ldr	r3, [pc, #508]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f44:	091b      	lsrs	r3, r3, #4
 8000f46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d224      	bcs.n	8000f98 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 fece 	bl	8001cf4 <RCC_SetFlashLatencyFromMSIRange>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d002      	beq.n	8000f64 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	f000 bc7a 	b.w	8001858 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f64:	4b75      	ldr	r3, [pc, #468]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a74      	ldr	r2, [pc, #464]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f6a:	f043 0308 	orr.w	r3, r3, #8
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b72      	ldr	r3, [pc, #456]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f7c:	496f      	ldr	r1, [pc, #444]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f82:	4b6e      	ldr	r3, [pc, #440]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a1b      	ldr	r3, [r3, #32]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	496a      	ldr	r1, [pc, #424]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f92:	4313      	orrs	r3, r2
 8000f94:	604b      	str	r3, [r1, #4]
 8000f96:	e026      	b.n	8000fe6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f98:	4b68      	ldr	r3, [pc, #416]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a67      	ldr	r2, [pc, #412]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000f9e:	f043 0308 	orr.w	r3, r3, #8
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	4b65      	ldr	r3, [pc, #404]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb0:	4962      	ldr	r1, [pc, #392]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fb6:	4b61      	ldr	r3, [pc, #388]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a1b      	ldr	r3, [r3, #32]
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	495d      	ldr	r1, [pc, #372]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d10a      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 fe8d 	bl	8001cf4 <RCC_SetFlashLatencyFromMSIRange>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d002      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f000 bc39 	b.w	8001858 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000fe6:	f000 fe17 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a54      	ldr	r2, [pc, #336]	@ (8001140 <HAL_RCC_OscConfig+0x280>)
 8000fee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ff0:	4b54      	ldr	r3, [pc, #336]	@ (8001144 <HAL_RCC_OscConfig+0x284>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f004 fa11 	bl	800541c <HAL_InitTick>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d060      	beq.n	80010c6 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	f000 bc27 	b.w	8001858 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d039      	beq.n	8001086 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001012:	4b4a      	ldr	r3, [pc, #296]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a49      	ldr	r2, [pc, #292]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800101e:	f7ff faf5 	bl	800060c <HAL_GetTick>
 8001022:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001024:	e00f      	b.n	8001046 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001026:	f7ff faf1 	bl	800060c <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d908      	bls.n	8001046 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001034:	4b41      	ldr	r3, [pc, #260]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d102      	bne.n	8001046 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	f000 bc09 	b.w	8001858 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001046:	4b3d      	ldr	r3, [pc, #244]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0e9      	beq.n	8001026 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001052:	4b3a      	ldr	r3, [pc, #232]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a39      	ldr	r2, [pc, #228]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8001058:	f043 0308 	orr.w	r3, r3, #8
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	4b37      	ldr	r3, [pc, #220]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106a:	4934      	ldr	r1, [pc, #208]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 800106c:	4313      	orrs	r3, r2
 800106e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001070:	4b32      	ldr	r3, [pc, #200]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	492f      	ldr	r1, [pc, #188]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8001080:	4313      	orrs	r3, r2
 8001082:	604b      	str	r3, [r1, #4]
 8001084:	e020      	b.n	80010c8 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001086:	4b2d      	ldr	r3, [pc, #180]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a2c      	ldr	r2, [pc, #176]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 800108c:	f023 0301 	bic.w	r3, r3, #1
 8001090:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001092:	f7ff fabb 	bl	800060c <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001098:	e00e      	b.n	80010b8 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800109a:	f7ff fab7 	bl	800060c <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d907      	bls.n	80010b8 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010a8:	4b24      	ldr	r3, [pc, #144]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e3cf      	b.n	8001858 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010b8:	4b20      	ldr	r3, [pc, #128]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1ea      	bne.n	800109a <HAL_RCC_OscConfig+0x1da>
 80010c4:	e000      	b.n	80010c8 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d07e      	beq.n	80011d2 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d005      	beq.n	80010e6 <HAL_RCC_OscConfig+0x226>
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	2b0c      	cmp	r3, #12
 80010de:	d10e      	bne.n	80010fe <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	d10b      	bne.n	80010fe <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d06e      	beq.n	80011d0 <HAL_RCC_OscConfig+0x310>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d16a      	bne.n	80011d0 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e3ac      	b.n	8001858 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001106:	d106      	bne.n	8001116 <HAL_RCC_OscConfig+0x256>
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0b      	ldr	r2, [pc, #44]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 800110e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	e024      	b.n	8001160 <HAL_RCC_OscConfig+0x2a0>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800111e:	d113      	bne.n	8001148 <HAL_RCC_OscConfig+0x288>
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a05      	ldr	r2, [pc, #20]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8001126:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b03      	ldr	r3, [pc, #12]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a02      	ldr	r2, [pc, #8]	@ (800113c <HAL_RCC_OscConfig+0x27c>)
 8001132:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	e012      	b.n	8001160 <HAL_RCC_OscConfig+0x2a0>
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000
 8001140:	20000008 	.word	0x20000008
 8001144:	20000000 	.word	0x20000000
 8001148:	4b8b      	ldr	r3, [pc, #556]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a8a      	ldr	r2, [pc, #552]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 800114e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b88      	ldr	r3, [pc, #544]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a87      	ldr	r2, [pc, #540]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 800115a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800115e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d019      	beq.n	800119c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001168:	f7ff fa50 	bl	800060c <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800116e:	e00e      	b.n	800118e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001170:	f7ff fa4c 	bl	800060c <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b64      	cmp	r3, #100	@ 0x64
 800117c:	d907      	bls.n	800118e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800117e:	4b7e      	ldr	r3, [pc, #504]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e364      	b.n	8001858 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800118e:	4b7a      	ldr	r3, [pc, #488]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0ea      	beq.n	8001170 <HAL_RCC_OscConfig+0x2b0>
 800119a:	e01a      	b.n	80011d2 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119c:	f7ff fa36 	bl	800060c <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011a2:	e00e      	b.n	80011c2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a4:	f7ff fa32 	bl	800060c <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b64      	cmp	r3, #100	@ 0x64
 80011b0:	d907      	bls.n	80011c2 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011b2:	4b71      	ldr	r3, [pc, #452]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e34a      	b.n	8001858 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1ea      	bne.n	80011a4 <HAL_RCC_OscConfig+0x2e4>
 80011ce:	e000      	b.n	80011d2 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d06c      	beq.n	80012b8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d005      	beq.n	80011f0 <HAL_RCC_OscConfig+0x330>
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	2b0c      	cmp	r3, #12
 80011e8:	d119      	bne.n	800121e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d116      	bne.n	800121e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011f0:	4b61      	ldr	r3, [pc, #388]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d005      	beq.n	8001208 <HAL_RCC_OscConfig+0x348>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e327      	b.n	8001858 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001208:	4b5b      	ldr	r3, [pc, #364]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	061b      	lsls	r3, r3, #24
 8001216:	4958      	ldr	r1, [pc, #352]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001218:	4313      	orrs	r3, r2
 800121a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800121c:	e04c      	b.n	80012b8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d029      	beq.n	800127a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001226:	4b54      	ldr	r3, [pc, #336]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a53      	ldr	r2, [pc, #332]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 800122c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001232:	f7ff f9eb 	bl	800060c <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001238:	e00e      	b.n	8001258 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800123a:	f7ff f9e7 	bl	800060c <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d907      	bls.n	8001258 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001248:	4b4b      	ldr	r3, [pc, #300]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e2ff      	b.n	8001858 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001258:	4b47      	ldr	r3, [pc, #284]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0ea      	beq.n	800123a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001264:	4b44      	ldr	r3, [pc, #272]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	061b      	lsls	r3, r3, #24
 8001272:	4941      	ldr	r1, [pc, #260]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001274:	4313      	orrs	r3, r2
 8001276:	604b      	str	r3, [r1, #4]
 8001278:	e01e      	b.n	80012b8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800127a:	4b3f      	ldr	r3, [pc, #252]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a3e      	ldr	r2, [pc, #248]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001286:	f7ff f9c1 	bl	800060c <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800128c:	e00e      	b.n	80012ac <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800128e:	f7ff f9bd 	bl	800060c <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d907      	bls.n	80012ac <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800129c:	4b36      	ldr	r3, [pc, #216]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e2d5      	b.n	8001858 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012ac:	4b32      	ldr	r3, [pc, #200]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1ea      	bne.n	800128e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d062      	beq.n	800138a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d038      	beq.n	800133e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d108      	bne.n	80012e6 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80012d4:	4b28      	ldr	r3, [pc, #160]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 80012d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012da:	4a27      	ldr	r2, [pc, #156]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 80012dc:	f023 0310 	bic.w	r3, r3, #16
 80012e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80012e4:	e007      	b.n	80012f6 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80012e6:	4b24      	ldr	r3, [pc, #144]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 80012e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012ec:	4a22      	ldr	r2, [pc, #136]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 80012ee:	f043 0310 	orr.w	r3, r3, #16
 80012f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f6:	4b20      	ldr	r3, [pc, #128]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 80012f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001306:	f7ff f981 	bl	800060c <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800130c:	e00f      	b.n	800132e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800130e:	f7ff f97d 	bl	800060c <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b07      	cmp	r3, #7
 800131a:	d908      	bls.n	800132e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800131c:	4b16      	ldr	r3, [pc, #88]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 800131e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e294      	b.n	8001858 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800132e:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001330:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0e8      	beq.n	800130e <HAL_RCC_OscConfig+0x44e>
 800133c:	e025      	b.n	800138a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800133e:	4b0e      	ldr	r3, [pc, #56]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001344:	4a0c      	ldr	r2, [pc, #48]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001346:	f023 0301 	bic.w	r3, r3, #1
 800134a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800134e:	f7ff f95d 	bl	800060c <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001354:	e012      	b.n	800137c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001356:	f7ff f959 	bl	800060c <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b07      	cmp	r3, #7
 8001362:	d90b      	bls.n	800137c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001364:	4b04      	ldr	r3, [pc, #16]	@ (8001378 <HAL_RCC_OscConfig+0x4b8>)
 8001366:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d004      	beq.n	800137c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e270      	b.n	8001858 <HAL_RCC_OscConfig+0x998>
 8001376:	bf00      	nop
 8001378:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800137c:	4ba8      	ldr	r3, [pc, #672]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 800137e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1e5      	bne.n	8001356 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 812d 	beq.w	80015f2 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001398:	2300      	movs	r3, #0
 800139a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800139c:	4ba0      	ldr	r3, [pc, #640]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 800139e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d10d      	bne.n	80013c4 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013a8:	4b9d      	ldr	r3, [pc, #628]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 80013aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ac:	4a9c      	ldr	r2, [pc, #624]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 80013ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80013b4:	4b9a      	ldr	r3, [pc, #616]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 80013b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013c0:	2301      	movs	r3, #1
 80013c2:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013c4:	4b97      	ldr	r3, [pc, #604]	@ (8001624 <HAL_RCC_OscConfig+0x764>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d11e      	bne.n	800140e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013d0:	4b94      	ldr	r3, [pc, #592]	@ (8001624 <HAL_RCC_OscConfig+0x764>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a93      	ldr	r2, [pc, #588]	@ (8001624 <HAL_RCC_OscConfig+0x764>)
 80013d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013dc:	f7ff f916 	bl	800060c <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013e2:	e00e      	b.n	8001402 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e4:	f7ff f912 	bl	800060c <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d907      	bls.n	8001402 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013f2:	4b8c      	ldr	r3, [pc, #560]	@ (8001624 <HAL_RCC_OscConfig+0x764>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e22a      	b.n	8001858 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001402:	4b88      	ldr	r3, [pc, #544]	@ (8001624 <HAL_RCC_OscConfig+0x764>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0ea      	beq.n	80013e4 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d01f      	beq.n	800145a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	2b00      	cmp	r3, #0
 8001424:	d010      	beq.n	8001448 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001426:	4b7e      	ldr	r3, [pc, #504]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 8001428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800142c:	4a7c      	ldr	r2, [pc, #496]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 800142e:	f043 0304 	orr.w	r3, r3, #4
 8001432:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001436:	4b7a      	ldr	r3, [pc, #488]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 8001438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800143c:	4a78      	ldr	r2, [pc, #480]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001446:	e018      	b.n	800147a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001448:	4b75      	ldr	r3, [pc, #468]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 800144a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800144e:	4a74      	ldr	r2, [pc, #464]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001458:	e00f      	b.n	800147a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800145a:	4b71      	ldr	r3, [pc, #452]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 800145c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001460:	4a6f      	ldr	r2, [pc, #444]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 8001462:	f023 0301 	bic.w	r3, r3, #1
 8001466:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800146a:	4b6d      	ldr	r3, [pc, #436]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 800146c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001470:	4a6b      	ldr	r2, [pc, #428]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 8001472:	f023 0304 	bic.w	r3, r3, #4
 8001476:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d068      	beq.n	8001554 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001482:	f7ff f8c3 	bl	800060c <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001488:	e011      	b.n	80014ae <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800148a:	f7ff f8bf 	bl	800060c <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001498:	4293      	cmp	r3, r2
 800149a:	d908      	bls.n	80014ae <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800149c:	4b60      	ldr	r3, [pc, #384]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 800149e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e1d4      	b.n	8001858 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 80014b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0e6      	beq.n	800148a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d022      	beq.n	800150e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80014c8:	4b55      	ldr	r3, [pc, #340]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 80014ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014ce:	4a54      	ldr	r2, [pc, #336]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 80014d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80014d8:	e011      	b.n	80014fe <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014da:	f7ff f897 	bl	800060c <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d908      	bls.n	80014fe <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80014ec:	4b4c      	ldr	r3, [pc, #304]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 80014ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e1ac      	b.n	8001858 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80014fe:	4b48      	ldr	r3, [pc, #288]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 8001500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001504:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0e6      	beq.n	80014da <HAL_RCC_OscConfig+0x61a>
 800150c:	e068      	b.n	80015e0 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800150e:	4b44      	ldr	r3, [pc, #272]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 8001510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001514:	4a42      	ldr	r2, [pc, #264]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 8001516:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800151a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800151e:	e011      	b.n	8001544 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001520:	f7ff f874 	bl	800060c <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800152e:	4293      	cmp	r3, r2
 8001530:	d908      	bls.n	8001544 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001532:	4b3b      	ldr	r3, [pc, #236]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 8001534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001538:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e189      	b.n	8001858 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001544:	4b36      	ldr	r3, [pc, #216]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 8001546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800154a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1e6      	bne.n	8001520 <HAL_RCC_OscConfig+0x660>
 8001552:	e045      	b.n	80015e0 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001554:	f7ff f85a 	bl	800060c <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800155a:	e011      	b.n	8001580 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800155c:	f7ff f856 	bl	800060c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800156a:	4293      	cmp	r3, r2
 800156c:	d908      	bls.n	8001580 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800156e:	4b2c      	ldr	r3, [pc, #176]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 8001570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e16b      	b.n	8001858 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001580:	4b27      	ldr	r3, [pc, #156]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 8001582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1e6      	bne.n	800155c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800158e:	4b24      	ldr	r3, [pc, #144]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 8001590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001598:	2b00      	cmp	r3, #0
 800159a:	d021      	beq.n	80015e0 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800159c:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 800159e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 80015a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80015ac:	e011      	b.n	80015d2 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ae:	f7ff f82d 	bl	800060c <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015bc:	4293      	cmp	r3, r2
 80015be:	d908      	bls.n	80015d2 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80015c0:	4b17      	ldr	r3, [pc, #92]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 80015c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e142      	b.n	8001858 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80015d2:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 80015d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1e6      	bne.n	80015ae <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015e0:	7ffb      	ldrb	r3, [r7, #31]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d105      	bne.n	80015f2 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ea:	4a0d      	ldr	r2, [pc, #52]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 80015ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0320 	and.w	r3, r3, #32
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d04f      	beq.n	800169e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001602:	2b00      	cmp	r3, #0
 8001604:	d028      	beq.n	8001658 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 8001608:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800160c:	4a04      	ldr	r2, [pc, #16]	@ (8001620 <HAL_RCC_OscConfig+0x760>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001616:	f7fe fff9 	bl	800060c <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800161c:	e014      	b.n	8001648 <HAL_RCC_OscConfig+0x788>
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000
 8001624:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001628:	f7fe fff0 	bl	800060c <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d908      	bls.n	8001648 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001636:	4b8a      	ldr	r3, [pc, #552]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 8001638:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e107      	b.n	8001858 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001648:	4b85      	ldr	r3, [pc, #532]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 800164a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0e8      	beq.n	8001628 <HAL_RCC_OscConfig+0x768>
 8001656:	e022      	b.n	800169e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001658:	4b81      	ldr	r3, [pc, #516]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 800165a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800165e:	4a80      	ldr	r2, [pc, #512]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 8001660:	f023 0301 	bic.w	r3, r3, #1
 8001664:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001668:	f7fe ffd0 	bl	800060c <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800166e:	e00f      	b.n	8001690 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001670:	f7fe ffcc 	bl	800060c <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d908      	bls.n	8001690 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800167e:	4b78      	ldr	r3, [pc, #480]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 8001680:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e0e3      	b.n	8001858 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001690:	4b73      	ldr	r3, [pc, #460]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 8001692:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1e8      	bne.n	8001670 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 80d7 	beq.w	8001856 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016a8:	4b6d      	ldr	r3, [pc, #436]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 030c 	and.w	r3, r3, #12
 80016b0:	2b0c      	cmp	r3, #12
 80016b2:	f000 8091 	beq.w	80017d8 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d166      	bne.n	800178c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016be:	4b68      	ldr	r3, [pc, #416]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a67      	ldr	r2, [pc, #412]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 80016c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ca:	f7fe ff9f 	bl	800060c <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d0:	e00e      	b.n	80016f0 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d2:	f7fe ff9b 	bl	800060c <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d907      	bls.n	80016f0 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016e0:	4b5f      	ldr	r3, [pc, #380]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e0b3      	b.n	8001858 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016f0:	4b5b      	ldr	r3, [pc, #364]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1ea      	bne.n	80016d2 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016fc:	4b58      	ldr	r3, [pc, #352]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	4b58      	ldr	r3, [pc, #352]	@ (8001864 <HAL_RCC_OscConfig+0x9a4>)
 8001702:	4013      	ands	r3, r2
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800170c:	3a01      	subs	r2, #1
 800170e:	0112      	lsls	r2, r2, #4
 8001710:	4311      	orrs	r1, r2
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001716:	0212      	lsls	r2, r2, #8
 8001718:	4311      	orrs	r1, r2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800171e:	0852      	lsrs	r2, r2, #1
 8001720:	3a01      	subs	r2, #1
 8001722:	0552      	lsls	r2, r2, #21
 8001724:	4311      	orrs	r1, r2
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800172a:	0852      	lsrs	r2, r2, #1
 800172c:	3a01      	subs	r2, #1
 800172e:	0652      	lsls	r2, r2, #25
 8001730:	4311      	orrs	r1, r2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001736:	06d2      	lsls	r2, r2, #27
 8001738:	430a      	orrs	r2, r1
 800173a:	4949      	ldr	r1, [pc, #292]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 800173c:	4313      	orrs	r3, r2
 800173e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001740:	4b47      	ldr	r3, [pc, #284]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a46      	ldr	r2, [pc, #280]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 8001746:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800174a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800174c:	4b44      	ldr	r3, [pc, #272]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4a43      	ldr	r2, [pc, #268]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 8001752:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001756:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001758:	f7fe ff58 	bl	800060c <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800175e:	e00e      	b.n	800177e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001760:	f7fe ff54 	bl	800060c <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d907      	bls.n	800177e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800176e:	4b3c      	ldr	r3, [pc, #240]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e06c      	b.n	8001858 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800177e:	4b38      	ldr	r3, [pc, #224]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0ea      	beq.n	8001760 <HAL_RCC_OscConfig+0x8a0>
 800178a:	e064      	b.n	8001856 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178c:	4b34      	ldr	r3, [pc, #208]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a33      	ldr	r2, [pc, #204]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 8001792:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7fe ff38 	bl	800060c <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800179e:	e00e      	b.n	80017be <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a0:	f7fe ff34 	bl	800060c <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d907      	bls.n	80017be <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e04c      	b.n	8001858 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017be:	4b28      	ldr	r3, [pc, #160]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1ea      	bne.n	80017a0 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017ca:	4b25      	ldr	r3, [pc, #148]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	4924      	ldr	r1, [pc, #144]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 80017d0:	4b25      	ldr	r3, [pc, #148]	@ (8001868 <HAL_RCC_OscConfig+0x9a8>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	60cb      	str	r3, [r1, #12]
 80017d6:	e03e      	b.n	8001856 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e039      	b.n	8001858 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80017e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001860 <HAL_RCC_OscConfig+0x9a0>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f003 0203 	and.w	r2, r3, #3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d12c      	bne.n	8001852 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001802:	3b01      	subs	r3, #1
 8001804:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d123      	bne.n	8001852 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001814:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d11b      	bne.n	8001852 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001824:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001826:	429a      	cmp	r2, r3
 8001828:	d113      	bne.n	8001852 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	085b      	lsrs	r3, r3, #1
 8001836:	3b01      	subs	r3, #1
 8001838:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d109      	bne.n	8001852 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001848:	085b      	lsrs	r3, r3, #1
 800184a:	3b01      	subs	r3, #1
 800184c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021000 	.word	0x40021000
 8001864:	019f800c 	.word	0x019f800c
 8001868:	feeefffc 	.word	0xfeeefffc

0800186c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e11c      	b.n	8001abe <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001884:	4b90      	ldr	r3, [pc, #576]	@ (8001ac8 <HAL_RCC_ClockConfig+0x25c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 030f 	and.w	r3, r3, #15
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d910      	bls.n	80018b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b8d      	ldr	r3, [pc, #564]	@ (8001ac8 <HAL_RCC_ClockConfig+0x25c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 020f 	bic.w	r2, r3, #15
 800189a:	498b      	ldr	r1, [pc, #556]	@ (8001ac8 <HAL_RCC_ClockConfig+0x25c>)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a2:	4b89      	ldr	r3, [pc, #548]	@ (8001ac8 <HAL_RCC_ClockConfig+0x25c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e104      	b.n	8001abe <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d010      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	4b81      	ldr	r3, [pc, #516]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d908      	bls.n	80018e2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d0:	4b7e      	ldr	r3, [pc, #504]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	497b      	ldr	r1, [pc, #492]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8085 	beq.w	80019fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d11f      	bne.n	8001938 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f8:	4b74      	ldr	r3, [pc, #464]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0da      	b.n	8001abe <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001908:	f000 fa58 	bl	8001dbc <RCC_GetSysClockFreqFromPLLSource>
 800190c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4a6f      	ldr	r2, [pc, #444]	@ (8001ad0 <HAL_RCC_ClockConfig+0x264>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d947      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001916:	4b6d      	ldr	r3, [pc, #436]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d141      	bne.n	80019a6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001922:	4b6a      	ldr	r3, [pc, #424]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800192a:	4a68      	ldr	r2, [pc, #416]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 800192c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001930:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001932:	2380      	movs	r3, #128	@ 0x80
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	e036      	b.n	80019a6 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d107      	bne.n	8001950 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001940:	4b62      	ldr	r3, [pc, #392]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d115      	bne.n	8001978 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0b6      	b.n	8001abe <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d107      	bne.n	8001968 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001958:	4b5c      	ldr	r3, [pc, #368]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d109      	bne.n	8001978 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0aa      	b.n	8001abe <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001968:	4b58      	ldr	r3, [pc, #352]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0a2      	b.n	8001abe <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001978:	f000 f8b0 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 800197c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4a53      	ldr	r2, [pc, #332]	@ (8001ad0 <HAL_RCC_ClockConfig+0x264>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d90f      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001986:	4b51      	ldr	r3, [pc, #324]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d109      	bne.n	80019a6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001992:	4b4e      	ldr	r3, [pc, #312]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800199a:	4a4c      	ldr	r2, [pc, #304]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 800199c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019a2:	2380      	movs	r3, #128	@ 0x80
 80019a4:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019a6:	4b49      	ldr	r3, [pc, #292]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f023 0203 	bic.w	r2, r3, #3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	4946      	ldr	r1, [pc, #280]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019b8:	f7fe fe28 	bl	800060c <HAL_GetTick>
 80019bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019be:	e013      	b.n	80019e8 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c0:	f7fe fe24 	bl	800060c <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d90a      	bls.n	80019e8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d2:	4b3e      	ldr	r3, [pc, #248]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 020c 	and.w	r2, r3, #12
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e06a      	b.n	8001abe <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e8:	4b38      	ldr	r3, [pc, #224]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 020c 	and.w	r2, r3, #12
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d1e2      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	2b80      	cmp	r3, #128	@ 0x80
 80019fe:	d105      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001a00:	4b32      	ldr	r3, [pc, #200]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	4a31      	ldr	r2, [pc, #196]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 8001a06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a0a:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d010      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d208      	bcs.n	8001a3a <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	4b28      	ldr	r3, [pc, #160]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4925      	ldr	r1, [pc, #148]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a3a:	4b23      	ldr	r3, [pc, #140]	@ (8001ac8 <HAL_RCC_ClockConfig+0x25c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d210      	bcs.n	8001a6a <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a48:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac8 <HAL_RCC_ClockConfig+0x25c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f023 020f 	bic.w	r2, r3, #15
 8001a50:	491d      	ldr	r1, [pc, #116]	@ (8001ac8 <HAL_RCC_ClockConfig+0x25c>)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a58:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac8 <HAL_RCC_ClockConfig+0x25c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 030f 	and.w	r3, r3, #15
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d001      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e029      	b.n	8001abe <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d008      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a76:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	4912      	ldr	r1, [pc, #72]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d009      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a94:	4b0d      	ldr	r3, [pc, #52]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	490a      	ldr	r1, [pc, #40]	@ (8001acc <HAL_RCC_ClockConfig+0x260>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001aa8:	f000 f8b6 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 8001aac:	4603      	mov	r3, r0
 8001aae:	4a09      	ldr	r2, [pc, #36]	@ (8001ad4 <HAL_RCC_ClockConfig+0x268>)
 8001ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	@ (8001ad8 <HAL_RCC_ClockConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f003 fcb0 	bl	800541c <HAL_InitTick>
 8001abc:	4603      	mov	r3, r0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40022000 	.word	0x40022000
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	04c4b400 	.word	0x04c4b400
 8001ad4:	20000008 	.word	0x20000008
 8001ad8:	20000000 	.word	0x20000000

08001adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b089      	sub	sp, #36	@ 0x24
 8001ae0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aea:	4b47      	ldr	r3, [pc, #284]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001af4:	4b44      	ldr	r3, [pc, #272]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x34>
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	2b0c      	cmp	r3, #12
 8001b08:	d121      	bne.n	8001b4e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d11e      	bne.n	8001b4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b10:	4b3d      	ldr	r3, [pc, #244]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d107      	bne.n	8001b2c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b1c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b22:	0a1b      	lsrs	r3, r3, #8
 8001b24:	f003 030f 	and.w	r3, r3, #15
 8001b28:	61fb      	str	r3, [r7, #28]
 8001b2a:	e005      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b2c:	4b36      	ldr	r3, [pc, #216]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8001b38:	4a34      	ldr	r2, [pc, #208]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x130>)
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b40:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10d      	bne.n	8001b64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b4c:	e00a      	b.n	8001b64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d102      	bne.n	8001b5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b54:	4b2e      	ldr	r3, [pc, #184]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x134>)
 8001b56:	61bb      	str	r3, [r7, #24]
 8001b58:	e004      	b.n	8001b64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b60:	4b2c      	ldr	r3, [pc, #176]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	2b0c      	cmp	r3, #12
 8001b68:	d146      	bne.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b6a:	4b27      	ldr	r3, [pc, #156]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b74:	4b24      	ldr	r3, [pc, #144]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	3301      	adds	r3, #1
 8001b80:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d003      	beq.n	8001b90 <HAL_RCC_GetSysClockFreq+0xb4>
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d00d      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0xce>
 8001b8e:	e019      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b90:	4a1f      	ldr	r2, [pc, #124]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x134>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b98:	4a1b      	ldr	r2, [pc, #108]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001b9a:	68d2      	ldr	r2, [r2, #12]
 8001b9c:	0a12      	lsrs	r2, r2, #8
 8001b9e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ba2:	fb02 f303 	mul.w	r3, r2, r3
 8001ba6:	617b      	str	r3, [r7, #20]
        break;
 8001ba8:	e019      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001baa:	4a1a      	ldr	r2, [pc, #104]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb2:	4a15      	ldr	r2, [pc, #84]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001bb4:	68d2      	ldr	r2, [r2, #12]
 8001bb6:	0a12      	lsrs	r2, r2, #8
 8001bb8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001bbc:	fb02 f303 	mul.w	r3, r2, r3
 8001bc0:	617b      	str	r3, [r7, #20]
        break;
 8001bc2:	e00c      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bc4:	69fa      	ldr	r2, [r7, #28]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bcc:	4a0e      	ldr	r2, [pc, #56]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001bce:	68d2      	ldr	r2, [r2, #12]
 8001bd0:	0a12      	lsrs	r2, r2, #8
 8001bd2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001bd6:	fb02 f303 	mul.w	r3, r2, r3
 8001bda:	617b      	str	r3, [r7, #20]
        break;
 8001bdc:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001bde:	4b0a      	ldr	r3, [pc, #40]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	0e5b      	lsrs	r3, r3, #25
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	3301      	adds	r3, #1
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bf8:	69bb      	ldr	r3, [r7, #24]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3724      	adds	r7, #36	@ 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	080057c0 	.word	0x080057c0
 8001c10:	00f42400 	.word	0x00f42400
 8001c14:	007a1200 	.word	0x007a1200

08001c18 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8001c1c:	f7ff ff5e 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 8001c20:	4602      	mov	r2, r0
 8001c22:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <HAL_RCC_GetHCLKFreq+0x20>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	091b      	lsrs	r3, r3, #4
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	4903      	ldr	r1, [pc, #12]	@ (8001c3c <HAL_RCC_GetHCLKFreq+0x24>)
 8001c2e:	5ccb      	ldrb	r3, [r1, r3]
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	080057a8 	.word	0x080057a8

08001c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c44:	f7ff ffe8 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	0a1b      	lsrs	r3, r3, #8
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	4903      	ldr	r1, [pc, #12]	@ (8001c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c56:	5ccb      	ldrb	r3, [r1, r3]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40021000 	.word	0x40021000
 8001c64:	080057b8 	.word	0x080057b8

08001c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c6c:	f7ff ffd4 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 8001c70:	4602      	mov	r2, r0
 8001c72:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	0adb      	lsrs	r3, r3, #11
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	4903      	ldr	r1, [pc, #12]	@ (8001c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c7e:	5ccb      	ldrb	r3, [r1, r3]
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	080057b8 	.word	0x080057b8

08001c90 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ca0:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <HAL_RCC_GetClockConfig+0x5c>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 0203 	and.w	r2, r3, #3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cac:	4b0f      	ldr	r3, [pc, #60]	@ (8001cec <HAL_RCC_GetClockConfig+0x5c>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <HAL_RCC_GetClockConfig+0x5c>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cc4:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <HAL_RCC_GetClockConfig+0x5c>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	08db      	lsrs	r3, r3, #3
 8001cca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cd2:	4b07      	ldr	r3, [pc, #28]	@ (8001cf0 <HAL_RCC_GetClockConfig+0x60>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 020f 	and.w	r2, r3, #15
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	601a      	str	r2, [r3, #0]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40022000 	.word	0x40022000

08001cf4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d00:	4b2c      	ldr	r3, [pc, #176]	@ (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d0c:	f7ff f82a 	bl	8000d64 <HAL_PWREx_GetVoltageRange>
 8001d10:	6138      	str	r0, [r7, #16]
 8001d12:	e014      	b.n	8001d3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d14:	4b27      	ldr	r3, [pc, #156]	@ (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d18:	4a26      	ldr	r2, [pc, #152]	@ (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001d1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d20:	4b24      	ldr	r3, [pc, #144]	@ (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d2c:	f7ff f81a 	bl	8000d64 <HAL_PWREx_GetVoltageRange>
 8001d30:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d32:	4b20      	ldr	r3, [pc, #128]	@ (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d36:	4a1f      	ldr	r2, [pc, #124]	@ (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001d38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d3c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d4a:	d10b      	bne.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b80      	cmp	r3, #128	@ 0x80
 8001d50:	d919      	bls.n	8001d86 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d56:	d902      	bls.n	8001d5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d58:	2302      	movs	r3, #2
 8001d5a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001d5c:	e013      	b.n	8001d86 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d5e:	2301      	movs	r3, #1
 8001d60:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001d62:	e010      	b.n	8001d86 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b80      	cmp	r3, #128	@ 0x80
 8001d68:	d902      	bls.n	8001d70 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	e00a      	b.n	8001d86 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b80      	cmp	r3, #128	@ 0x80
 8001d74:	d102      	bne.n	8001d7c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d76:	2302      	movs	r3, #2
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	e004      	b.n	8001d86 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b70      	cmp	r3, #112	@ 0x70
 8001d80:	d101      	bne.n	8001d86 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d82:	2301      	movs	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d86:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 020f 	bic.w	r2, r3, #15
 8001d8e:	490a      	ldr	r1, [pc, #40]	@ (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001d96:	4b08      	ldr	r3, [pc, #32]	@ (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40022000 	.word	0x40022000

08001dbc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dc2:	4b31      	ldr	r3, [pc, #196]	@ (8001e88 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8001e88 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	091b      	lsrs	r3, r3, #4
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d015      	beq.n	8001e0c <RCC_GetSysClockFreqFromPLLSource+0x50>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d839      	bhi.n	8001e5a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d01c      	beq.n	8001e26 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d133      	bne.n	8001e5a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001df2:	4a26      	ldr	r2, [pc, #152]	@ (8001e8c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfa:	4a23      	ldr	r2, [pc, #140]	@ (8001e88 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001dfc:	68d2      	ldr	r2, [r2, #12]
 8001dfe:	0a12      	lsrs	r2, r2, #8
 8001e00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e04:	fb02 f303 	mul.w	r3, r2, r3
 8001e08:	613b      	str	r3, [r7, #16]
      break;
 8001e0a:	e029      	b.n	8001e60 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e0c:	4a20      	ldr	r2, [pc, #128]	@ (8001e90 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e14:	4a1c      	ldr	r2, [pc, #112]	@ (8001e88 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001e16:	68d2      	ldr	r2, [r2, #12]
 8001e18:	0a12      	lsrs	r2, r2, #8
 8001e1a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	613b      	str	r3, [r7, #16]
      break;
 8001e24:	e01c      	b.n	8001e60 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e26:	4b18      	ldr	r3, [pc, #96]	@ (8001e88 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d107      	bne.n	8001e42 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e32:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	e005      	b.n	8001e4e <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e42:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	091b      	lsrs	r3, r3, #4
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8001e4e:	4a11      	ldr	r2, [pc, #68]	@ (8001e94 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e56:	613b      	str	r3, [r7, #16]
        break;
 8001e58:	e002      	b.n	8001e60 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
      break;
 8001e5e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001e60:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	0e5b      	lsrs	r3, r3, #25
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e78:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001e7a:	683b      	ldr	r3, [r7, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	371c      	adds	r7, #28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	00f42400 	.word	0x00f42400
 8001e90:	007a1200 	.word	0x007a1200
 8001e94:	080057c0 	.word	0x080057c0

08001e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d040      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001eb8:	2b80      	cmp	r3, #128	@ 0x80
 8001eba:	d02a      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001ebc:	2b80      	cmp	r3, #128	@ 0x80
 8001ebe:	d825      	bhi.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001ec0:	2b60      	cmp	r3, #96	@ 0x60
 8001ec2:	d026      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001ec4:	2b60      	cmp	r3, #96	@ 0x60
 8001ec6:	d821      	bhi.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001ec8:	2b40      	cmp	r3, #64	@ 0x40
 8001eca:	d006      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x42>
 8001ecc:	2b40      	cmp	r3, #64	@ 0x40
 8001ece:	d81d      	bhi.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d009      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8001ed4:	2b20      	cmp	r3, #32
 8001ed6:	d010      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x62>
 8001ed8:	e018      	b.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001eda:	4b8f      	ldr	r3, [pc, #572]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	4a8e      	ldr	r2, [pc, #568]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee4:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8001ee6:	e015      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3304      	adds	r3, #4
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fb56 	bl	80025a0 <RCCEx_PLLSAI1_Config>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8001ef8:	e00c      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3320      	adds	r3, #32
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fc33 	bl	800276c <RCCEx_PLLSAI2_Config>
 8001f06:	4603      	mov	r3, r0
 8001f08:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8001f0a:	e003      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	77fb      	strb	r3, [r7, #31]
        break;
 8001f10:	e000      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8001f12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001f14:	7ffb      	ldrb	r3, [r7, #31]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10b      	bne.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f1a:	4b7f      	ldr	r3, [pc, #508]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f20:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f28:	497b      	ldr	r1, [pc, #492]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8001f30:	e001      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f32:	7ffb      	ldrb	r3, [r7, #31]
 8001f34:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d047      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f4a:	d030      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x116>
 8001f4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f50:	d82a      	bhi.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8001f52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001f56:	d02a      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x116>
 8001f58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001f5c:	d824      	bhi.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8001f5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f62:	d008      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f68:	d81e      	bhi.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f72:	d010      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001f74:	e018      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f76:	4b68      	ldr	r3, [pc, #416]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	4a67      	ldr	r2, [pc, #412]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f80:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8001f82:	e015      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3304      	adds	r3, #4
 8001f88:	2100      	movs	r1, #0
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 fb08 	bl	80025a0 <RCCEx_PLLSAI1_Config>
 8001f90:	4603      	mov	r3, r0
 8001f92:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8001f94:	e00c      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3320      	adds	r3, #32
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 fbe5 	bl	800276c <RCCEx_PLLSAI2_Config>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8001fa6:	e003      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	77fb      	strb	r3, [r7, #31]
        break;
 8001fac:	e000      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8001fae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001fb0:	7ffb      	ldrb	r3, [r7, #31]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10b      	bne.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fb6:	4b58      	ldr	r3, [pc, #352]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001fb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001fbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fc4:	4954      	ldr	r1, [pc, #336]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8001fcc:	e001      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fce:	7ffb      	ldrb	r3, [r7, #31]
 8001fd0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 80ab 	beq.w	8002136 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fe4:	4b4c      	ldr	r3, [pc, #304]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10d      	bne.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff0:	4b49      	ldr	r3, [pc, #292]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff4:	4a48      	ldr	r2, [pc, #288]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ffa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ffc:	4b46      	ldr	r3, [pc, #280]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002008:	2301      	movs	r3, #1
 800200a:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800200c:	4b43      	ldr	r3, [pc, #268]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a42      	ldr	r2, [pc, #264]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002012:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002016:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002018:	f7fe faf8 	bl	800060c <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800201e:	e00f      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002020:	f7fe faf4 	bl	800060c <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d908      	bls.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800202e:	4b3b      	ldr	r3, [pc, #236]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800203e:	e006      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002040:	4b36      	ldr	r3, [pc, #216]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0e9      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800204c:	e000      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800204e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8002050:	7ffb      	ldrb	r3, [r7, #31]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d164      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002056:	4b30      	ldr	r3, [pc, #192]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800205c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002060:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01f      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	429a      	cmp	r2, r3
 8002072:	d019      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002074:	4b28      	ldr	r3, [pc, #160]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800207e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002080:	4b25      	ldr	r3, [pc, #148]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002086:	4a24      	ldr	r2, [pc, #144]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800208c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002090:	4b21      	ldr	r3, [pc, #132]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002096:	4a20      	ldr	r2, [pc, #128]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800209c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d01f      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b2:	f7fe faab 	bl	800060c <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b8:	e012      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7fe faa7 	bl	800060c <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d909      	bls.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020cc:	4b12      	ldr	r3, [pc, #72]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10a      	bne.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80020de:	e007      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0e5      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x222>
 80020ee:	e000      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80020f0:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80020f2:	7ffb      	ldrb	r3, [r7, #31]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10c      	bne.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020f8:	4b07      	ldr	r3, [pc, #28]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002108:	4903      	ldr	r1, [pc, #12]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002110:	e008      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002112:	7ffb      	ldrb	r3, [r7, #31]
 8002114:	77bb      	strb	r3, [r7, #30]
 8002116:	e005      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8002118:	40021000 	.word	0x40021000
 800211c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002120:	7ffb      	ldrb	r3, [r7, #31]
 8002122:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002124:	7dfb      	ldrb	r3, [r7, #23]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d105      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212a:	4b9c      	ldr	r3, [pc, #624]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800212c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212e:	4a9b      	ldr	r2, [pc, #620]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002130:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002134:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00a      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002142:	4b96      	ldr	r3, [pc, #600]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002148:	f023 0203 	bic.w	r2, r3, #3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002150:	4992      	ldr	r1, [pc, #584]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00a      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002164:	4b8d      	ldr	r3, [pc, #564]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216a:	f023 020c 	bic.w	r2, r3, #12
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002172:	498a      	ldr	r1, [pc, #552]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002186:	4b85      	ldr	r3, [pc, #532]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002194:	4981      	ldr	r1, [pc, #516]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021a8:	4b7c      	ldr	r3, [pc, #496]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	4979      	ldr	r1, [pc, #484]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021ca:	4b74      	ldr	r3, [pc, #464]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80021cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d8:	4970      	ldr	r1, [pc, #448]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021ec:	4b6b      	ldr	r3, [pc, #428]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021fa:	4968      	ldr	r1, [pc, #416]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800220e:	4b63      	ldr	r3, [pc, #396]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002214:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221c:	495f      	ldr	r1, [pc, #380]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002230:	4b5a      	ldr	r3, [pc, #360]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002236:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800223e:	4957      	ldr	r1, [pc, #348]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002252:	4b52      	ldr	r3, [pc, #328]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002258:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002260:	494e      	ldr	r1, [pc, #312]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d031      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002278:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800227c:	d00e      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800227e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002282:	d814      	bhi.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002284:	2b00      	cmp	r3, #0
 8002286:	d015      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002288:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800228c:	d10f      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800228e:	4b43      	ldr	r3, [pc, #268]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	4a42      	ldr	r2, [pc, #264]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002294:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002298:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800229a:	e00c      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3304      	adds	r3, #4
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f97c 	bl	80025a0 <RCCEx_PLLSAI1_Config>
 80022a8:	4603      	mov	r3, r0
 80022aa:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80022ac:	e003      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	77fb      	strb	r3, [r7, #31]
        break;
 80022b2:	e000      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80022b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022b6:	7ffb      	ldrb	r3, [r7, #31]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10b      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80022bc:	4b37      	ldr	r3, [pc, #220]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022ca:	4934      	ldr	r1, [pc, #208]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80022d2:	e001      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022d4:	7ffb      	ldrb	r3, [r7, #31]
 80022d6:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022e4:	4b2d      	ldr	r3, [pc, #180]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f2:	492a      	ldr	r1, [pc, #168]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00a      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002306:	4b25      	ldr	r3, [pc, #148]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002314:	4921      	ldr	r1, [pc, #132]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00a      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002328:	4b1c      	ldr	r3, [pc, #112]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002336:	4919      	ldr	r1, [pc, #100]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00a      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800234a:	4b14      	ldr	r3, [pc, #80]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800234c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002350:	f023 0203 	bic.w	r2, r3, #3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002358:	4910      	ldr	r1, [pc, #64]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d02b      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800236c:	4b0b      	ldr	r3, [pc, #44]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002372:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800237a:	4908      	ldr	r1, [pc, #32]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002386:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800238a:	d109      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800238c:	4b03      	ldr	r3, [pc, #12]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a02      	ldr	r2, [pc, #8]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002396:	60d3      	str	r3, [r2, #12]
 8002398:	e014      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3304      	adds	r3, #4
 80023ae:	2101      	movs	r1, #1
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 f8f5 	bl	80025a0 <RCCEx_PLLSAI1_Config>
 80023b6:	4603      	mov	r3, r0
 80023b8:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80023ba:	7ffb      	ldrb	r3, [r7, #31]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80023c0:	7ffb      	ldrb	r3, [r7, #31]
 80023c2:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d04a      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023d8:	d108      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x554>
 80023da:	4b70      	ldr	r3, [pc, #448]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80023dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80023e0:	4a6e      	ldr	r2, [pc, #440]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80023e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023e6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80023ea:	e012      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80023ec:	4b6b      	ldr	r3, [pc, #428]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023fa:	4968      	ldr	r1, [pc, #416]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002402:	4b66      	ldr	r3, [pc, #408]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002404:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002408:	4a64      	ldr	r2, [pc, #400]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800240a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800240e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002416:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800241a:	d10d      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3304      	adds	r3, #4
 8002420:	2101      	movs	r1, #1
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f8bc 	bl	80025a0 <RCCEx_PLLSAI1_Config>
 8002428:	4603      	mov	r3, r0
 800242a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800242c:	7ffb      	ldrb	r3, [r7, #31]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d019      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8002432:	7ffb      	ldrb	r3, [r7, #31]
 8002434:	77bb      	strb	r3, [r7, #30]
 8002436:	e016      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800243c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002440:	d106      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002442:	4b56      	ldr	r3, [pc, #344]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	4a55      	ldr	r2, [pc, #340]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002448:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800244c:	60d3      	str	r3, [r2, #12]
 800244e:	e00a      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002454:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002458:	d105      	bne.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800245a:	4b50      	ldr	r3, [pc, #320]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	4a4f      	ldr	r2, [pc, #316]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002464:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d028      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002472:	4b4a      	ldr	r3, [pc, #296]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002478:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002480:	4946      	ldr	r1, [pc, #280]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800248c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002490:	d106      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002492:	4b42      	ldr	r3, [pc, #264]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	4a41      	ldr	r2, [pc, #260]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002498:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800249c:	60d3      	str	r3, [r2, #12]
 800249e:	e011      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3304      	adds	r3, #4
 80024ae:	2101      	movs	r1, #1
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 f875 	bl	80025a0 <RCCEx_PLLSAI1_Config>
 80024b6:	4603      	mov	r3, r0
 80024b8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80024ba:	7ffb      	ldrb	r3, [r7, #31]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80024c0:	7ffb      	ldrb	r3, [r7, #31]
 80024c2:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01e      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024d0:	4b32      	ldr	r3, [pc, #200]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024e0:	492e      	ldr	r1, [pc, #184]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024f2:	d10c      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3304      	adds	r3, #4
 80024f8:	2102      	movs	r1, #2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f850 	bl	80025a0 <RCCEx_PLLSAI1_Config>
 8002500:	4603      	mov	r3, r0
 8002502:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002504:	7ffb      	ldrb	r3, [r7, #31]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 800250a:	7ffb      	ldrb	r3, [r7, #31]
 800250c:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800251a:	4b20      	ldr	r3, [pc, #128]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800251c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002520:	f023 0204 	bic.w	r2, r3, #4
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800252a:	491c      	ldr	r1, [pc, #112]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00b      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800253e:	4b17      	ldr	r3, [pc, #92]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002540:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002544:	f023 0218 	bic.w	r2, r3, #24
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800254e:	4913      	ldr	r1, [pc, #76]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d017      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002562:	4b0e      	ldr	r3, [pc, #56]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002564:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002568:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002572:	490a      	ldr	r1, [pc, #40]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002580:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002584:	d105      	bne.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002586:	4b05      	ldr	r3, [pc, #20]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	4a04      	ldr	r2, [pc, #16]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800258c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002590:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002592:	7fbb      	ldrb	r3, [r7, #30]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3720      	adds	r7, #32
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000

080025a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d018      	beq.n	80025e8 <RCCEx_PLLSAI1_Config+0x48>
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d81f      	bhi.n	80025fa <RCCEx_PLLSAI1_Config+0x5a>
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d002      	beq.n	80025c4 <RCCEx_PLLSAI1_Config+0x24>
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d009      	beq.n	80025d6 <RCCEx_PLLSAI1_Config+0x36>
 80025c2:	e01a      	b.n	80025fa <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025c4:	4b65      	ldr	r3, [pc, #404]	@ (800275c <RCCEx_PLLSAI1_Config+0x1bc>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d117      	bne.n	8002600 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d4:	e014      	b.n	8002600 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025d6:	4b61      	ldr	r3, [pc, #388]	@ (800275c <RCCEx_PLLSAI1_Config+0x1bc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d110      	bne.n	8002604 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e6:	e00d      	b.n	8002604 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80025e8:	4b5c      	ldr	r3, [pc, #368]	@ (800275c <RCCEx_PLLSAI1_Config+0x1bc>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d109      	bne.n	8002608 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f8:	e006      	b.n	8002608 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
      break;
 80025fe:	e004      	b.n	800260a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002600:	bf00      	nop
 8002602:	e002      	b.n	800260a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002604:	bf00      	nop
 8002606:	e000      	b.n	800260a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002608:	bf00      	nop
  }

  if (status == HAL_OK)
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	2b00      	cmp	r3, #0
 800260e:	f040 809f 	bne.w	8002750 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002612:	4b52      	ldr	r3, [pc, #328]	@ (800275c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a51      	ldr	r2, [pc, #324]	@ (800275c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002618:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800261c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800261e:	f7fd fff5 	bl	800060c <HAL_GetTick>
 8002622:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002624:	e00f      	b.n	8002646 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002626:	f7fd fff1 	bl	800060c <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d908      	bls.n	8002646 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002634:	4b49      	ldr	r3, [pc, #292]	@ (800275c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d009      	beq.n	8002654 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002644:	e006      	b.n	8002654 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002646:	4b45      	ldr	r3, [pc, #276]	@ (800275c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1e9      	bne.n	8002626 <RCCEx_PLLSAI1_Config+0x86>
 8002652:	e000      	b.n	8002656 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8002654:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d179      	bne.n	8002750 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d116      	bne.n	8002690 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002662:	4b3e      	ldr	r3, [pc, #248]	@ (800275c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	4b3e      	ldr	r3, [pc, #248]	@ (8002760 <RCCEx_PLLSAI1_Config+0x1c0>)
 8002668:	4013      	ands	r3, r2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6892      	ldr	r2, [r2, #8]
 800266e:	0211      	lsls	r1, r2, #8
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	68d2      	ldr	r2, [r2, #12]
 8002674:	06d2      	lsls	r2, r2, #27
 8002676:	4311      	orrs	r1, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6852      	ldr	r2, [r2, #4]
 800267c:	3a01      	subs	r2, #1
 800267e:	0112      	lsls	r2, r2, #4
 8002680:	4311      	orrs	r1, r2
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	4934      	ldr	r1, [pc, #208]	@ (800275c <RCCEx_PLLSAI1_Config+0x1bc>)
 800268a:	4313      	orrs	r3, r2
 800268c:	610b      	str	r3, [r1, #16]
 800268e:	e033      	b.n	80026f8 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d118      	bne.n	80026c8 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002696:	4b31      	ldr	r3, [pc, #196]	@ (800275c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002698:	691a      	ldr	r2, [r3, #16]
 800269a:	4b32      	ldr	r3, [pc, #200]	@ (8002764 <RCCEx_PLLSAI1_Config+0x1c4>)
 800269c:	4013      	ands	r3, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6892      	ldr	r2, [r2, #8]
 80026a2:	0211      	lsls	r1, r2, #8
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6912      	ldr	r2, [r2, #16]
 80026a8:	0852      	lsrs	r2, r2, #1
 80026aa:	3a01      	subs	r2, #1
 80026ac:	0552      	lsls	r2, r2, #21
 80026ae:	4311      	orrs	r1, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6852      	ldr	r2, [r2, #4]
 80026b4:	3a01      	subs	r2, #1
 80026b6:	0112      	lsls	r2, r2, #4
 80026b8:	4311      	orrs	r1, r2
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6812      	ldr	r2, [r2, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	4926      	ldr	r1, [pc, #152]	@ (800275c <RCCEx_PLLSAI1_Config+0x1bc>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	610b      	str	r3, [r1, #16]
 80026c6:	e017      	b.n	80026f8 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026c8:	4b24      	ldr	r3, [pc, #144]	@ (800275c <RCCEx_PLLSAI1_Config+0x1bc>)
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	4b26      	ldr	r3, [pc, #152]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1c8>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6892      	ldr	r2, [r2, #8]
 80026d4:	0211      	lsls	r1, r2, #8
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6952      	ldr	r2, [r2, #20]
 80026da:	0852      	lsrs	r2, r2, #1
 80026dc:	3a01      	subs	r2, #1
 80026de:	0652      	lsls	r2, r2, #25
 80026e0:	4311      	orrs	r1, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6852      	ldr	r2, [r2, #4]
 80026e6:	3a01      	subs	r2, #1
 80026e8:	0112      	lsls	r2, r2, #4
 80026ea:	4311      	orrs	r1, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	491a      	ldr	r1, [pc, #104]	@ (800275c <RCCEx_PLLSAI1_Config+0x1bc>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026f8:	4b18      	ldr	r3, [pc, #96]	@ (800275c <RCCEx_PLLSAI1_Config+0x1bc>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a17      	ldr	r2, [pc, #92]	@ (800275c <RCCEx_PLLSAI1_Config+0x1bc>)
 80026fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002702:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002704:	f7fd ff82 	bl	800060c <HAL_GetTick>
 8002708:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800270a:	e00f      	b.n	800272c <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800270c:	f7fd ff7e 	bl	800060c <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d908      	bls.n	800272c <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800271a:	4b10      	ldr	r3, [pc, #64]	@ (800275c <RCCEx_PLLSAI1_Config+0x1bc>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800272a:	e006      	b.n	800273a <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800272c:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <RCCEx_PLLSAI1_Config+0x1bc>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0e9      	beq.n	800270c <RCCEx_PLLSAI1_Config+0x16c>
 8002738:	e000      	b.n	800273c <RCCEx_PLLSAI1_Config+0x19c>
          break;
 800273a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8002742:	4b06      	ldr	r3, [pc, #24]	@ (800275c <RCCEx_PLLSAI1_Config+0x1bc>)
 8002744:	691a      	ldr	r2, [r3, #16]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	4904      	ldr	r1, [pc, #16]	@ (800275c <RCCEx_PLLSAI1_Config+0x1bc>)
 800274c:	4313      	orrs	r3, r2
 800274e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002750:	7bfb      	ldrb	r3, [r7, #15]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40021000 	.word	0x40021000
 8002760:	07ff800c 	.word	0x07ff800c
 8002764:	ff9f800c 	.word	0xff9f800c
 8002768:	f9ff800c 	.word	0xf9ff800c

0800276c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b03      	cmp	r3, #3
 8002780:	d018      	beq.n	80027b4 <RCCEx_PLLSAI2_Config+0x48>
 8002782:	2b03      	cmp	r3, #3
 8002784:	d81f      	bhi.n	80027c6 <RCCEx_PLLSAI2_Config+0x5a>
 8002786:	2b01      	cmp	r3, #1
 8002788:	d002      	beq.n	8002790 <RCCEx_PLLSAI2_Config+0x24>
 800278a:	2b02      	cmp	r3, #2
 800278c:	d009      	beq.n	80027a2 <RCCEx_PLLSAI2_Config+0x36>
 800278e:	e01a      	b.n	80027c6 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002790:	4b4a      	ldr	r3, [pc, #296]	@ (80028bc <RCCEx_PLLSAI2_Config+0x150>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d117      	bne.n	80027cc <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a0:	e014      	b.n	80027cc <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027a2:	4b46      	ldr	r3, [pc, #280]	@ (80028bc <RCCEx_PLLSAI2_Config+0x150>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d110      	bne.n	80027d0 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b2:	e00d      	b.n	80027d0 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80027b4:	4b41      	ldr	r3, [pc, #260]	@ (80028bc <RCCEx_PLLSAI2_Config+0x150>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d109      	bne.n	80027d4 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c4:	e006      	b.n	80027d4 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
      break;
 80027ca:	e004      	b.n	80027d6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80027cc:	bf00      	nop
 80027ce:	e002      	b.n	80027d6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80027d0:	bf00      	nop
 80027d2:	e000      	b.n	80027d6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80027d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d169      	bne.n	80028b0 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027dc:	4b37      	ldr	r3, [pc, #220]	@ (80028bc <RCCEx_PLLSAI2_Config+0x150>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a36      	ldr	r2, [pc, #216]	@ (80028bc <RCCEx_PLLSAI2_Config+0x150>)
 80027e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e8:	f7fd ff10 	bl	800060c <HAL_GetTick>
 80027ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027ee:	e00f      	b.n	8002810 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027f0:	f7fd ff0c 	bl	800060c <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d908      	bls.n	8002810 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027fe:	4b2f      	ldr	r3, [pc, #188]	@ (80028bc <RCCEx_PLLSAI2_Config+0x150>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d009      	beq.n	800281e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800280e:	e006      	b.n	800281e <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002810:	4b2a      	ldr	r3, [pc, #168]	@ (80028bc <RCCEx_PLLSAI2_Config+0x150>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1e9      	bne.n	80027f0 <RCCEx_PLLSAI2_Config+0x84>
 800281c:	e000      	b.n	8002820 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800281e:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d144      	bne.n	80028b0 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d115      	bne.n	8002858 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800282c:	4b23      	ldr	r3, [pc, #140]	@ (80028bc <RCCEx_PLLSAI2_Config+0x150>)
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	4b23      	ldr	r3, [pc, #140]	@ (80028c0 <RCCEx_PLLSAI2_Config+0x154>)
 8002832:	4013      	ands	r3, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6892      	ldr	r2, [r2, #8]
 8002838:	0211      	lsls	r1, r2, #8
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68d2      	ldr	r2, [r2, #12]
 800283e:	06d2      	lsls	r2, r2, #27
 8002840:	4311      	orrs	r1, r2
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6852      	ldr	r2, [r2, #4]
 8002846:	3a01      	subs	r2, #1
 8002848:	0112      	lsls	r2, r2, #4
 800284a:	4311      	orrs	r1, r2
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	491a      	ldr	r1, [pc, #104]	@ (80028bc <RCCEx_PLLSAI2_Config+0x150>)
 8002854:	4313      	orrs	r3, r2
 8002856:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002858:	4b18      	ldr	r3, [pc, #96]	@ (80028bc <RCCEx_PLLSAI2_Config+0x150>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a17      	ldr	r2, [pc, #92]	@ (80028bc <RCCEx_PLLSAI2_Config+0x150>)
 800285e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002862:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7fd fed2 	bl	800060c <HAL_GetTick>
 8002868:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800286a:	e00f      	b.n	800288c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800286c:	f7fd fece 	bl	800060c <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d908      	bls.n	800288c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800287a:	4b10      	ldr	r3, [pc, #64]	@ (80028bc <RCCEx_PLLSAI2_Config+0x150>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800288a:	e006      	b.n	800289a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800288c:	4b0b      	ldr	r3, [pc, #44]	@ (80028bc <RCCEx_PLLSAI2_Config+0x150>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0e9      	beq.n	800286c <RCCEx_PLLSAI2_Config+0x100>
 8002898:	e000      	b.n	800289c <RCCEx_PLLSAI2_Config+0x130>
          break;
 800289a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80028a2:	4b06      	ldr	r3, [pc, #24]	@ (80028bc <RCCEx_PLLSAI2_Config+0x150>)
 80028a4:	695a      	ldr	r2, [r3, #20]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	4904      	ldr	r1, [pc, #16]	@ (80028bc <RCCEx_PLLSAI2_Config+0x150>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000
 80028c0:	07ff800c 	.word	0x07ff800c

080028c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e049      	b.n	800296a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f002 fbc8 	bl	8005080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3304      	adds	r3, #4
 8002900:	4619      	mov	r1, r3
 8002902:	4610      	mov	r0, r2
 8002904:	f000 fc14 	bl	8003130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b01      	cmp	r3, #1
 8002986:	d001      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e04f      	b.n	8002a2c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a23      	ldr	r2, [pc, #140]	@ (8002a38 <HAL_TIM_Base_Start_IT+0xc4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01d      	beq.n	80029ea <HAL_TIM_Base_Start_IT+0x76>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029b6:	d018      	beq.n	80029ea <HAL_TIM_Base_Start_IT+0x76>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1f      	ldr	r2, [pc, #124]	@ (8002a3c <HAL_TIM_Base_Start_IT+0xc8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_TIM_Base_Start_IT+0x76>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002a40 <HAL_TIM_Base_Start_IT+0xcc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00e      	beq.n	80029ea <HAL_TIM_Base_Start_IT+0x76>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002a44 <HAL_TIM_Base_Start_IT+0xd0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d009      	beq.n	80029ea <HAL_TIM_Base_Start_IT+0x76>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1b      	ldr	r2, [pc, #108]	@ (8002a48 <HAL_TIM_Base_Start_IT+0xd4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d004      	beq.n	80029ea <HAL_TIM_Base_Start_IT+0x76>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a19      	ldr	r2, [pc, #100]	@ (8002a4c <HAL_TIM_Base_Start_IT+0xd8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d115      	bne.n	8002a16 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	4b17      	ldr	r3, [pc, #92]	@ (8002a50 <HAL_TIM_Base_Start_IT+0xdc>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b06      	cmp	r3, #6
 80029fa:	d015      	beq.n	8002a28 <HAL_TIM_Base_Start_IT+0xb4>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a02:	d011      	beq.n	8002a28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a14:	e008      	b.n	8002a28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	e000      	b.n	8002a2a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	40012c00 	.word	0x40012c00
 8002a3c:	40000400 	.word	0x40000400
 8002a40:	40000800 	.word	0x40000800
 8002a44:	40000c00 	.word	0x40000c00
 8002a48:	40013400 	.word	0x40013400
 8002a4c:	40014000 	.word	0x40014000
 8002a50:	00010007 	.word	0x00010007

08002a54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e049      	b.n	8002afa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f841 	bl	8002b02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	4619      	mov	r1, r3
 8002a92:	4610      	mov	r0, r2
 8002a94:	f000 fb4c 	bl	8003130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b084      	sub	sp, #16
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d020      	beq.n	8002b7a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d01b      	beq.n	8002b7a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f06f 0202 	mvn.w	r2, #2
 8002b4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fac6 	bl	80030f2 <HAL_TIM_IC_CaptureCallback>
 8002b66:	e005      	b.n	8002b74 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 fab8 	bl	80030de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fac9 	bl	8003106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d020      	beq.n	8002bc6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d01b      	beq.n	8002bc6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f06f 0204 	mvn.w	r2, #4
 8002b96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 faa0 	bl	80030f2 <HAL_TIM_IC_CaptureCallback>
 8002bb2:	e005      	b.n	8002bc0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fa92 	bl	80030de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 faa3 	bl	8003106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d020      	beq.n	8002c12 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d01b      	beq.n	8002c12 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f06f 0208 	mvn.w	r2, #8
 8002be2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2204      	movs	r2, #4
 8002be8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fa7a 	bl	80030f2 <HAL_TIM_IC_CaptureCallback>
 8002bfe:	e005      	b.n	8002c0c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 fa6c 	bl	80030de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fa7d 	bl	8003106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d020      	beq.n	8002c5e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 0310 	and.w	r3, r3, #16
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d01b      	beq.n	8002c5e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f06f 0210 	mvn.w	r2, #16
 8002c2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2208      	movs	r2, #8
 8002c34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fa54 	bl	80030f2 <HAL_TIM_IC_CaptureCallback>
 8002c4a:	e005      	b.n	8002c58 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fa46 	bl	80030de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fa57 	bl	8003106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00c      	beq.n	8002c82 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d007      	beq.n	8002c82 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f06f 0201 	mvn.w	r2, #1
 8002c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f002 f9c3 	bl	8005008 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d104      	bne.n	8002c96 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00c      	beq.n	8002cb0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 ff76 	bl	8003b9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00c      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d007      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 ff6e 	bl	8003bb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00c      	beq.n	8002cf8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fa11 	bl	800311a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00c      	beq.n	8002d1c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0220 	mvn.w	r2, #32
 8002d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 ff36 	bl	8003b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e0ff      	b.n	8002f42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b14      	cmp	r3, #20
 8002d4e:	f200 80f0 	bhi.w	8002f32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002d52:	a201      	add	r2, pc, #4	@ (adr r2, 8002d58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d58:	08002dad 	.word	0x08002dad
 8002d5c:	08002f33 	.word	0x08002f33
 8002d60:	08002f33 	.word	0x08002f33
 8002d64:	08002f33 	.word	0x08002f33
 8002d68:	08002ded 	.word	0x08002ded
 8002d6c:	08002f33 	.word	0x08002f33
 8002d70:	08002f33 	.word	0x08002f33
 8002d74:	08002f33 	.word	0x08002f33
 8002d78:	08002e2f 	.word	0x08002e2f
 8002d7c:	08002f33 	.word	0x08002f33
 8002d80:	08002f33 	.word	0x08002f33
 8002d84:	08002f33 	.word	0x08002f33
 8002d88:	08002e6f 	.word	0x08002e6f
 8002d8c:	08002f33 	.word	0x08002f33
 8002d90:	08002f33 	.word	0x08002f33
 8002d94:	08002f33 	.word	0x08002f33
 8002d98:	08002eb1 	.word	0x08002eb1
 8002d9c:	08002f33 	.word	0x08002f33
 8002da0:	08002f33 	.word	0x08002f33
 8002da4:	08002f33 	.word	0x08002f33
 8002da8:	08002ef1 	.word	0x08002ef1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68b9      	ldr	r1, [r7, #8]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 fa62 	bl	800327c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0208 	orr.w	r2, r2, #8
 8002dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0204 	bic.w	r2, r2, #4
 8002dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6999      	ldr	r1, [r3, #24]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	619a      	str	r2, [r3, #24]
      break;
 8002dea:	e0a5      	b.n	8002f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fad2 	bl	800339c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699a      	ldr	r2, [r3, #24]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699a      	ldr	r2, [r3, #24]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6999      	ldr	r1, [r3, #24]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	021a      	lsls	r2, r3, #8
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	619a      	str	r2, [r3, #24]
      break;
 8002e2c:	e084      	b.n	8002f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68b9      	ldr	r1, [r7, #8]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 fb3b 	bl	80034b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69da      	ldr	r2, [r3, #28]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0208 	orr.w	r2, r2, #8
 8002e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	69da      	ldr	r2, [r3, #28]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0204 	bic.w	r2, r2, #4
 8002e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	69d9      	ldr	r1, [r3, #28]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	61da      	str	r2, [r3, #28]
      break;
 8002e6c:	e064      	b.n	8002f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68b9      	ldr	r1, [r7, #8]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fba3 	bl	80035c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	69da      	ldr	r2, [r3, #28]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	69da      	ldr	r2, [r3, #28]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69d9      	ldr	r1, [r3, #28]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	021a      	lsls	r2, r3, #8
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	61da      	str	r2, [r3, #28]
      break;
 8002eae:	e043      	b.n	8002f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 fbec 	bl	8003694 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0208 	orr.w	r2, r2, #8
 8002eca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0204 	bic.w	r2, r2, #4
 8002eda:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002eee:	e023      	b.n	8002f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68b9      	ldr	r1, [r7, #8]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 fc30 	bl	800375c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f0a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f1a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	021a      	lsls	r2, r3, #8
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002f30:	e002      	b.n	8002f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	75fb      	strb	r3, [r7, #23]
      break;
 8002f36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop

08002f4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_TIM_ConfigClockSource+0x1c>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e0b6      	b.n	80030d6 <HAL_TIM_ConfigClockSource+0x18a>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002f86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fa4:	d03e      	beq.n	8003024 <HAL_TIM_ConfigClockSource+0xd8>
 8002fa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002faa:	f200 8087 	bhi.w	80030bc <HAL_TIM_ConfigClockSource+0x170>
 8002fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fb2:	f000 8086 	beq.w	80030c2 <HAL_TIM_ConfigClockSource+0x176>
 8002fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fba:	d87f      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x170>
 8002fbc:	2b70      	cmp	r3, #112	@ 0x70
 8002fbe:	d01a      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0xaa>
 8002fc0:	2b70      	cmp	r3, #112	@ 0x70
 8002fc2:	d87b      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x170>
 8002fc4:	2b60      	cmp	r3, #96	@ 0x60
 8002fc6:	d050      	beq.n	800306a <HAL_TIM_ConfigClockSource+0x11e>
 8002fc8:	2b60      	cmp	r3, #96	@ 0x60
 8002fca:	d877      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x170>
 8002fcc:	2b50      	cmp	r3, #80	@ 0x50
 8002fce:	d03c      	beq.n	800304a <HAL_TIM_ConfigClockSource+0xfe>
 8002fd0:	2b50      	cmp	r3, #80	@ 0x50
 8002fd2:	d873      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x170>
 8002fd4:	2b40      	cmp	r3, #64	@ 0x40
 8002fd6:	d058      	beq.n	800308a <HAL_TIM_ConfigClockSource+0x13e>
 8002fd8:	2b40      	cmp	r3, #64	@ 0x40
 8002fda:	d86f      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x170>
 8002fdc:	2b30      	cmp	r3, #48	@ 0x30
 8002fde:	d064      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0x15e>
 8002fe0:	2b30      	cmp	r3, #48	@ 0x30
 8002fe2:	d86b      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x170>
 8002fe4:	2b20      	cmp	r3, #32
 8002fe6:	d060      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0x15e>
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d867      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x170>
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d05c      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0x15e>
 8002ff0:	2b10      	cmp	r3, #16
 8002ff2:	d05a      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0x15e>
 8002ff4:	e062      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003006:	f000 fc8b 	bl	8003920 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003018:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	609a      	str	r2, [r3, #8]
      break;
 8003022:	e04f      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003034:	f000 fc74 	bl	8003920 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003046:	609a      	str	r2, [r3, #8]
      break;
 8003048:	e03c      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003056:	461a      	mov	r2, r3
 8003058:	f000 fbe6 	bl	8003828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2150      	movs	r1, #80	@ 0x50
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fc3f 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 8003068:	e02c      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003076:	461a      	mov	r2, r3
 8003078:	f000 fc05 	bl	8003886 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2160      	movs	r1, #96	@ 0x60
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fc2f 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 8003088:	e01c      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003096:	461a      	mov	r2, r3
 8003098:	f000 fbc6 	bl	8003828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2140      	movs	r1, #64	@ 0x40
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fc1f 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 80030a8:	e00c      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4619      	mov	r1, r3
 80030b4:	4610      	mov	r0, r2
 80030b6:	f000 fc16 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 80030ba:	e003      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      break;
 80030c0:	e000      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80030c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a46      	ldr	r2, [pc, #280]	@ (800325c <TIM_Base_SetConfig+0x12c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d013      	beq.n	8003170 <TIM_Base_SetConfig+0x40>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800314e:	d00f      	beq.n	8003170 <TIM_Base_SetConfig+0x40>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a43      	ldr	r2, [pc, #268]	@ (8003260 <TIM_Base_SetConfig+0x130>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d00b      	beq.n	8003170 <TIM_Base_SetConfig+0x40>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a42      	ldr	r2, [pc, #264]	@ (8003264 <TIM_Base_SetConfig+0x134>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d007      	beq.n	8003170 <TIM_Base_SetConfig+0x40>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a41      	ldr	r2, [pc, #260]	@ (8003268 <TIM_Base_SetConfig+0x138>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d003      	beq.n	8003170 <TIM_Base_SetConfig+0x40>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a40      	ldr	r2, [pc, #256]	@ (800326c <TIM_Base_SetConfig+0x13c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d108      	bne.n	8003182 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a35      	ldr	r2, [pc, #212]	@ (800325c <TIM_Base_SetConfig+0x12c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d01f      	beq.n	80031ca <TIM_Base_SetConfig+0x9a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003190:	d01b      	beq.n	80031ca <TIM_Base_SetConfig+0x9a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a32      	ldr	r2, [pc, #200]	@ (8003260 <TIM_Base_SetConfig+0x130>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d017      	beq.n	80031ca <TIM_Base_SetConfig+0x9a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a31      	ldr	r2, [pc, #196]	@ (8003264 <TIM_Base_SetConfig+0x134>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d013      	beq.n	80031ca <TIM_Base_SetConfig+0x9a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a30      	ldr	r2, [pc, #192]	@ (8003268 <TIM_Base_SetConfig+0x138>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00f      	beq.n	80031ca <TIM_Base_SetConfig+0x9a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a2f      	ldr	r2, [pc, #188]	@ (800326c <TIM_Base_SetConfig+0x13c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d00b      	beq.n	80031ca <TIM_Base_SetConfig+0x9a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a2e      	ldr	r2, [pc, #184]	@ (8003270 <TIM_Base_SetConfig+0x140>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d007      	beq.n	80031ca <TIM_Base_SetConfig+0x9a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a2d      	ldr	r2, [pc, #180]	@ (8003274 <TIM_Base_SetConfig+0x144>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d003      	beq.n	80031ca <TIM_Base_SetConfig+0x9a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003278 <TIM_Base_SetConfig+0x148>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d108      	bne.n	80031dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4313      	orrs	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a16      	ldr	r2, [pc, #88]	@ (800325c <TIM_Base_SetConfig+0x12c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00f      	beq.n	8003228 <TIM_Base_SetConfig+0xf8>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a18      	ldr	r2, [pc, #96]	@ (800326c <TIM_Base_SetConfig+0x13c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00b      	beq.n	8003228 <TIM_Base_SetConfig+0xf8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a17      	ldr	r2, [pc, #92]	@ (8003270 <TIM_Base_SetConfig+0x140>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d007      	beq.n	8003228 <TIM_Base_SetConfig+0xf8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a16      	ldr	r2, [pc, #88]	@ (8003274 <TIM_Base_SetConfig+0x144>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d003      	beq.n	8003228 <TIM_Base_SetConfig+0xf8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a15      	ldr	r2, [pc, #84]	@ (8003278 <TIM_Base_SetConfig+0x148>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d103      	bne.n	8003230 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b01      	cmp	r3, #1
 8003240:	d105      	bne.n	800324e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f023 0201 	bic.w	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	611a      	str	r2, [r3, #16]
  }
}
 800324e:	bf00      	nop
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40012c00 	.word	0x40012c00
 8003260:	40000400 	.word	0x40000400
 8003264:	40000800 	.word	0x40000800
 8003268:	40000c00 	.word	0x40000c00
 800326c:	40013400 	.word	0x40013400
 8003270:	40014000 	.word	0x40014000
 8003274:	40014400 	.word	0x40014400
 8003278:	40014800 	.word	0x40014800

0800327c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	f023 0201 	bic.w	r2, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0303 	bic.w	r3, r3, #3
 80032b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f023 0302 	bic.w	r3, r3, #2
 80032c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003388 <TIM_OC1_SetConfig+0x10c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d00f      	beq.n	80032fc <TIM_OC1_SetConfig+0x80>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a2b      	ldr	r2, [pc, #172]	@ (800338c <TIM_OC1_SetConfig+0x110>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d00b      	beq.n	80032fc <TIM_OC1_SetConfig+0x80>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a2a      	ldr	r2, [pc, #168]	@ (8003390 <TIM_OC1_SetConfig+0x114>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d007      	beq.n	80032fc <TIM_OC1_SetConfig+0x80>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a29      	ldr	r2, [pc, #164]	@ (8003394 <TIM_OC1_SetConfig+0x118>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d003      	beq.n	80032fc <TIM_OC1_SetConfig+0x80>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a28      	ldr	r2, [pc, #160]	@ (8003398 <TIM_OC1_SetConfig+0x11c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d10c      	bne.n	8003316 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f023 0308 	bic.w	r3, r3, #8
 8003302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f023 0304 	bic.w	r3, r3, #4
 8003314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a1b      	ldr	r2, [pc, #108]	@ (8003388 <TIM_OC1_SetConfig+0x10c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00f      	beq.n	800333e <TIM_OC1_SetConfig+0xc2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a1a      	ldr	r2, [pc, #104]	@ (800338c <TIM_OC1_SetConfig+0x110>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d00b      	beq.n	800333e <TIM_OC1_SetConfig+0xc2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a19      	ldr	r2, [pc, #100]	@ (8003390 <TIM_OC1_SetConfig+0x114>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d007      	beq.n	800333e <TIM_OC1_SetConfig+0xc2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a18      	ldr	r2, [pc, #96]	@ (8003394 <TIM_OC1_SetConfig+0x118>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d003      	beq.n	800333e <TIM_OC1_SetConfig+0xc2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a17      	ldr	r2, [pc, #92]	@ (8003398 <TIM_OC1_SetConfig+0x11c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d111      	bne.n	8003362 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800334c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	621a      	str	r2, [r3, #32]
}
 800337c:	bf00      	nop
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40012c00 	.word	0x40012c00
 800338c:	40013400 	.word	0x40013400
 8003390:	40014000 	.word	0x40014000
 8003394:	40014400 	.word	0x40014400
 8003398:	40014800 	.word	0x40014800

0800339c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800339c:	b480      	push	{r7}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	f023 0210 	bic.w	r2, r3, #16
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	021b      	lsls	r3, r3, #8
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f023 0320 	bic.w	r3, r3, #32
 80033ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a28      	ldr	r2, [pc, #160]	@ (800349c <TIM_OC2_SetConfig+0x100>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d003      	beq.n	8003408 <TIM_OC2_SetConfig+0x6c>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a27      	ldr	r2, [pc, #156]	@ (80034a0 <TIM_OC2_SetConfig+0x104>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d10d      	bne.n	8003424 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800340e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4313      	orrs	r3, r2
 800341a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003422:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a1d      	ldr	r2, [pc, #116]	@ (800349c <TIM_OC2_SetConfig+0x100>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d00f      	beq.n	800344c <TIM_OC2_SetConfig+0xb0>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a1c      	ldr	r2, [pc, #112]	@ (80034a0 <TIM_OC2_SetConfig+0x104>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00b      	beq.n	800344c <TIM_OC2_SetConfig+0xb0>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a1b      	ldr	r2, [pc, #108]	@ (80034a4 <TIM_OC2_SetConfig+0x108>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d007      	beq.n	800344c <TIM_OC2_SetConfig+0xb0>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a1a      	ldr	r2, [pc, #104]	@ (80034a8 <TIM_OC2_SetConfig+0x10c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d003      	beq.n	800344c <TIM_OC2_SetConfig+0xb0>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a19      	ldr	r2, [pc, #100]	@ (80034ac <TIM_OC2_SetConfig+0x110>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d113      	bne.n	8003474 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003452:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800345a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	621a      	str	r2, [r3, #32]
}
 800348e:	bf00      	nop
 8003490:	371c      	adds	r7, #28
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40012c00 	.word	0x40012c00
 80034a0:	40013400 	.word	0x40013400
 80034a4:	40014000 	.word	0x40014000
 80034a8:	40014400 	.word	0x40014400
 80034ac:	40014800 	.word	0x40014800

080034b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0303 	bic.w	r3, r3, #3
 80034ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	021b      	lsls	r3, r3, #8
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a27      	ldr	r2, [pc, #156]	@ (80035ac <TIM_OC3_SetConfig+0xfc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d003      	beq.n	800351a <TIM_OC3_SetConfig+0x6a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a26      	ldr	r2, [pc, #152]	@ (80035b0 <TIM_OC3_SetConfig+0x100>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d10d      	bne.n	8003536 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003520:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a1c      	ldr	r2, [pc, #112]	@ (80035ac <TIM_OC3_SetConfig+0xfc>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00f      	beq.n	800355e <TIM_OC3_SetConfig+0xae>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a1b      	ldr	r2, [pc, #108]	@ (80035b0 <TIM_OC3_SetConfig+0x100>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00b      	beq.n	800355e <TIM_OC3_SetConfig+0xae>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a1a      	ldr	r2, [pc, #104]	@ (80035b4 <TIM_OC3_SetConfig+0x104>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d007      	beq.n	800355e <TIM_OC3_SetConfig+0xae>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a19      	ldr	r2, [pc, #100]	@ (80035b8 <TIM_OC3_SetConfig+0x108>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d003      	beq.n	800355e <TIM_OC3_SetConfig+0xae>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a18      	ldr	r2, [pc, #96]	@ (80035bc <TIM_OC3_SetConfig+0x10c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d113      	bne.n	8003586 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800356c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	621a      	str	r2, [r3, #32]
}
 80035a0:	bf00      	nop
 80035a2:	371c      	adds	r7, #28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	40012c00 	.word	0x40012c00
 80035b0:	40013400 	.word	0x40013400
 80035b4:	40014000 	.word	0x40014000
 80035b8:	40014400 	.word	0x40014400
 80035bc:	40014800 	.word	0x40014800

080035c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	021b      	lsls	r3, r3, #8
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800360e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	031b      	lsls	r3, r3, #12
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a18      	ldr	r2, [pc, #96]	@ (8003680 <TIM_OC4_SetConfig+0xc0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00f      	beq.n	8003644 <TIM_OC4_SetConfig+0x84>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a17      	ldr	r2, [pc, #92]	@ (8003684 <TIM_OC4_SetConfig+0xc4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d00b      	beq.n	8003644 <TIM_OC4_SetConfig+0x84>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a16      	ldr	r2, [pc, #88]	@ (8003688 <TIM_OC4_SetConfig+0xc8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d007      	beq.n	8003644 <TIM_OC4_SetConfig+0x84>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a15      	ldr	r2, [pc, #84]	@ (800368c <TIM_OC4_SetConfig+0xcc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d003      	beq.n	8003644 <TIM_OC4_SetConfig+0x84>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a14      	ldr	r2, [pc, #80]	@ (8003690 <TIM_OC4_SetConfig+0xd0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d109      	bne.n	8003658 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800364a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	019b      	lsls	r3, r3, #6
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	621a      	str	r2, [r3, #32]
}
 8003672:	bf00      	nop
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40012c00 	.word	0x40012c00
 8003684:	40013400 	.word	0x40013400
 8003688:	40014000 	.word	0x40014000
 800368c:	40014400 	.word	0x40014400
 8003690:	40014800 	.word	0x40014800

08003694 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80036d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	041b      	lsls	r3, r3, #16
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a17      	ldr	r2, [pc, #92]	@ (8003748 <TIM_OC5_SetConfig+0xb4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00f      	beq.n	800370e <TIM_OC5_SetConfig+0x7a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a16      	ldr	r2, [pc, #88]	@ (800374c <TIM_OC5_SetConfig+0xb8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00b      	beq.n	800370e <TIM_OC5_SetConfig+0x7a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a15      	ldr	r2, [pc, #84]	@ (8003750 <TIM_OC5_SetConfig+0xbc>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d007      	beq.n	800370e <TIM_OC5_SetConfig+0x7a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a14      	ldr	r2, [pc, #80]	@ (8003754 <TIM_OC5_SetConfig+0xc0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d003      	beq.n	800370e <TIM_OC5_SetConfig+0x7a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a13      	ldr	r2, [pc, #76]	@ (8003758 <TIM_OC5_SetConfig+0xc4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d109      	bne.n	8003722 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003714:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	021b      	lsls	r3, r3, #8
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	4313      	orrs	r3, r2
 8003720:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	621a      	str	r2, [r3, #32]
}
 800373c:	bf00      	nop
 800373e:	371c      	adds	r7, #28
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	40012c00 	.word	0x40012c00
 800374c:	40013400 	.word	0x40013400
 8003750:	40014000 	.word	0x40014000
 8003754:	40014400 	.word	0x40014400
 8003758:	40014800 	.word	0x40014800

0800375c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800378a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800378e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	021b      	lsls	r3, r3, #8
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4313      	orrs	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	051b      	lsls	r3, r3, #20
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a18      	ldr	r2, [pc, #96]	@ (8003814 <TIM_OC6_SetConfig+0xb8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00f      	beq.n	80037d8 <TIM_OC6_SetConfig+0x7c>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a17      	ldr	r2, [pc, #92]	@ (8003818 <TIM_OC6_SetConfig+0xbc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00b      	beq.n	80037d8 <TIM_OC6_SetConfig+0x7c>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a16      	ldr	r2, [pc, #88]	@ (800381c <TIM_OC6_SetConfig+0xc0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d007      	beq.n	80037d8 <TIM_OC6_SetConfig+0x7c>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a15      	ldr	r2, [pc, #84]	@ (8003820 <TIM_OC6_SetConfig+0xc4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d003      	beq.n	80037d8 <TIM_OC6_SetConfig+0x7c>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a14      	ldr	r2, [pc, #80]	@ (8003824 <TIM_OC6_SetConfig+0xc8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d109      	bne.n	80037ec <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	029b      	lsls	r3, r3, #10
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	621a      	str	r2, [r3, #32]
}
 8003806:	bf00      	nop
 8003808:	371c      	adds	r7, #28
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40012c00 	.word	0x40012c00
 8003818:	40013400 	.word	0x40013400
 800381c:	40014000 	.word	0x40014000
 8003820:	40014400 	.word	0x40014400
 8003824:	40014800 	.word	0x40014800

08003828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	f023 0201 	bic.w	r2, r3, #1
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f023 030a 	bic.w	r3, r3, #10
 8003864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4313      	orrs	r3, r2
 800386c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	621a      	str	r2, [r3, #32]
}
 800387a:	bf00      	nop
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003886:	b480      	push	{r7}
 8003888:	b087      	sub	sp, #28
 800388a:	af00      	add	r7, sp, #0
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	f023 0210 	bic.w	r2, r3, #16
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	031b      	lsls	r3, r3, #12
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	621a      	str	r2, [r3, #32]
}
 80038da:	bf00      	nop
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b085      	sub	sp, #20
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80038fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003900:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	f043 0307 	orr.w	r3, r3, #7
 800390c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	609a      	str	r2, [r3, #8]
}
 8003914:	bf00      	nop
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800393a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	021a      	lsls	r2, r3, #8
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	431a      	orrs	r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4313      	orrs	r3, r2
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	609a      	str	r2, [r3, #8]
}
 8003954:	bf00      	nop
 8003956:	371c      	adds	r7, #28
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003974:	2302      	movs	r3, #2
 8003976:	e068      	b.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a2e      	ldr	r2, [pc, #184]	@ (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d004      	beq.n	80039ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a2d      	ldr	r2, [pc, #180]	@ (8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d108      	bne.n	80039be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80039b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a1e      	ldr	r2, [pc, #120]	@ (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01d      	beq.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ea:	d018      	beq.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003a60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d013      	beq.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003a64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00e      	beq.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a18      	ldr	r2, [pc, #96]	@ (8003a68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d009      	beq.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a13      	ldr	r2, [pc, #76]	@ (8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d004      	beq.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a14      	ldr	r2, [pc, #80]	@ (8003a6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d10c      	bne.n	8003a38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40012c00 	.word	0x40012c00
 8003a5c:	40013400 	.word	0x40013400
 8003a60:	40000400 	.word	0x40000400
 8003a64:	40000800 	.word	0x40000800
 8003a68:	40000c00 	.word	0x40000c00
 8003a6c:	40014000 	.word	0x40014000

08003a70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e073      	b.n	8003b74 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	041b      	lsls	r3, r3, #16
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a19      	ldr	r2, [pc, #100]	@ (8003b80 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d004      	beq.n	8003b28 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a18      	ldr	r2, [pc, #96]	@ (8003b84 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d11c      	bne.n	8003b62 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b32:	051b      	lsls	r3, r3, #20
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	40012c00 	.word	0x40012c00
 8003b84:	40013400 	.word	0x40013400

08003b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e042      	b.n	8003c5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d106      	bne.n	8003bee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f001 fb2b 	bl	8005244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2224      	movs	r2, #36	@ 0x24
 8003bf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0201 	bic.w	r2, r2, #1
 8003c04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fb28 	bl	8004264 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f825 	bl	8003c64 <UART_SetConfig>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e01b      	b.n	8003c5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0201 	orr.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 fba7 	bl	80043a8 <UART_CheckIdleState>
 8003c5a:	4603      	mov	r3, r0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c68:	b08c      	sub	sp, #48	@ 0x30
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	4baa      	ldr	r3, [pc, #680]	@ (8003f3c <UART_SetConfig+0x2d8>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	6812      	ldr	r2, [r2, #0]
 8003c9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a9f      	ldr	r2, [pc, #636]	@ (8003f40 <UART_SetConfig+0x2dc>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d004      	beq.n	8003cd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003cda:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	6812      	ldr	r2, [r2, #0]
 8003ce2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cee:	f023 010f 	bic.w	r1, r3, #15
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a90      	ldr	r2, [pc, #576]	@ (8003f44 <UART_SetConfig+0x2e0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d125      	bne.n	8003d54 <UART_SetConfig+0xf0>
 8003d08:	4b8f      	ldr	r3, [pc, #572]	@ (8003f48 <UART_SetConfig+0x2e4>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d81a      	bhi.n	8003d4c <UART_SetConfig+0xe8>
 8003d16:	a201      	add	r2, pc, #4	@ (adr r2, 8003d1c <UART_SetConfig+0xb8>)
 8003d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1c:	08003d2d 	.word	0x08003d2d
 8003d20:	08003d3d 	.word	0x08003d3d
 8003d24:	08003d35 	.word	0x08003d35
 8003d28:	08003d45 	.word	0x08003d45
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d32:	e116      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003d34:	2302      	movs	r3, #2
 8003d36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d3a:	e112      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003d3c:	2304      	movs	r3, #4
 8003d3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d42:	e10e      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003d44:	2308      	movs	r3, #8
 8003d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d4a:	e10a      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003d4c:	2310      	movs	r3, #16
 8003d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d52:	e106      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a7c      	ldr	r2, [pc, #496]	@ (8003f4c <UART_SetConfig+0x2e8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d138      	bne.n	8003dd0 <UART_SetConfig+0x16c>
 8003d5e:	4b7a      	ldr	r3, [pc, #488]	@ (8003f48 <UART_SetConfig+0x2e4>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d64:	f003 030c 	and.w	r3, r3, #12
 8003d68:	2b0c      	cmp	r3, #12
 8003d6a:	d82d      	bhi.n	8003dc8 <UART_SetConfig+0x164>
 8003d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d74 <UART_SetConfig+0x110>)
 8003d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d72:	bf00      	nop
 8003d74:	08003da9 	.word	0x08003da9
 8003d78:	08003dc9 	.word	0x08003dc9
 8003d7c:	08003dc9 	.word	0x08003dc9
 8003d80:	08003dc9 	.word	0x08003dc9
 8003d84:	08003db9 	.word	0x08003db9
 8003d88:	08003dc9 	.word	0x08003dc9
 8003d8c:	08003dc9 	.word	0x08003dc9
 8003d90:	08003dc9 	.word	0x08003dc9
 8003d94:	08003db1 	.word	0x08003db1
 8003d98:	08003dc9 	.word	0x08003dc9
 8003d9c:	08003dc9 	.word	0x08003dc9
 8003da0:	08003dc9 	.word	0x08003dc9
 8003da4:	08003dc1 	.word	0x08003dc1
 8003da8:	2300      	movs	r3, #0
 8003daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dae:	e0d8      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003db0:	2302      	movs	r3, #2
 8003db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003db6:	e0d4      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003db8:	2304      	movs	r3, #4
 8003dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dbe:	e0d0      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003dc0:	2308      	movs	r3, #8
 8003dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dc6:	e0cc      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003dc8:	2310      	movs	r3, #16
 8003dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dce:	e0c8      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a5e      	ldr	r2, [pc, #376]	@ (8003f50 <UART_SetConfig+0x2ec>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d125      	bne.n	8003e26 <UART_SetConfig+0x1c2>
 8003dda:	4b5b      	ldr	r3, [pc, #364]	@ (8003f48 <UART_SetConfig+0x2e4>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003de4:	2b30      	cmp	r3, #48	@ 0x30
 8003de6:	d016      	beq.n	8003e16 <UART_SetConfig+0x1b2>
 8003de8:	2b30      	cmp	r3, #48	@ 0x30
 8003dea:	d818      	bhi.n	8003e1e <UART_SetConfig+0x1ba>
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	d00a      	beq.n	8003e06 <UART_SetConfig+0x1a2>
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	d814      	bhi.n	8003e1e <UART_SetConfig+0x1ba>
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <UART_SetConfig+0x19a>
 8003df8:	2b10      	cmp	r3, #16
 8003dfa:	d008      	beq.n	8003e0e <UART_SetConfig+0x1aa>
 8003dfc:	e00f      	b.n	8003e1e <UART_SetConfig+0x1ba>
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e04:	e0ad      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003e06:	2302      	movs	r3, #2
 8003e08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e0c:	e0a9      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003e0e:	2304      	movs	r3, #4
 8003e10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e14:	e0a5      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003e16:	2308      	movs	r3, #8
 8003e18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e1c:	e0a1      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003e1e:	2310      	movs	r3, #16
 8003e20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e24:	e09d      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a4a      	ldr	r2, [pc, #296]	@ (8003f54 <UART_SetConfig+0x2f0>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d125      	bne.n	8003e7c <UART_SetConfig+0x218>
 8003e30:	4b45      	ldr	r3, [pc, #276]	@ (8003f48 <UART_SetConfig+0x2e4>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003e3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e3c:	d016      	beq.n	8003e6c <UART_SetConfig+0x208>
 8003e3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e40:	d818      	bhi.n	8003e74 <UART_SetConfig+0x210>
 8003e42:	2b80      	cmp	r3, #128	@ 0x80
 8003e44:	d00a      	beq.n	8003e5c <UART_SetConfig+0x1f8>
 8003e46:	2b80      	cmp	r3, #128	@ 0x80
 8003e48:	d814      	bhi.n	8003e74 <UART_SetConfig+0x210>
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <UART_SetConfig+0x1f0>
 8003e4e:	2b40      	cmp	r3, #64	@ 0x40
 8003e50:	d008      	beq.n	8003e64 <UART_SetConfig+0x200>
 8003e52:	e00f      	b.n	8003e74 <UART_SetConfig+0x210>
 8003e54:	2300      	movs	r3, #0
 8003e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e5a:	e082      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e62:	e07e      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003e64:	2304      	movs	r3, #4
 8003e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e6a:	e07a      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003e6c:	2308      	movs	r3, #8
 8003e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e72:	e076      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003e74:	2310      	movs	r3, #16
 8003e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e7a:	e072      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a35      	ldr	r2, [pc, #212]	@ (8003f58 <UART_SetConfig+0x2f4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d12a      	bne.n	8003edc <UART_SetConfig+0x278>
 8003e86:	4b30      	ldr	r3, [pc, #192]	@ (8003f48 <UART_SetConfig+0x2e4>)
 8003e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e94:	d01a      	beq.n	8003ecc <UART_SetConfig+0x268>
 8003e96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e9a:	d81b      	bhi.n	8003ed4 <UART_SetConfig+0x270>
 8003e9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ea0:	d00c      	beq.n	8003ebc <UART_SetConfig+0x258>
 8003ea2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ea6:	d815      	bhi.n	8003ed4 <UART_SetConfig+0x270>
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <UART_SetConfig+0x250>
 8003eac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eb0:	d008      	beq.n	8003ec4 <UART_SetConfig+0x260>
 8003eb2:	e00f      	b.n	8003ed4 <UART_SetConfig+0x270>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eba:	e052      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ec2:	e04e      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003ec4:	2304      	movs	r3, #4
 8003ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eca:	e04a      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003ecc:	2308      	movs	r3, #8
 8003ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ed2:	e046      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003ed4:	2310      	movs	r3, #16
 8003ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eda:	e042      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a17      	ldr	r2, [pc, #92]	@ (8003f40 <UART_SetConfig+0x2dc>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d13a      	bne.n	8003f5c <UART_SetConfig+0x2f8>
 8003ee6:	4b18      	ldr	r3, [pc, #96]	@ (8003f48 <UART_SetConfig+0x2e4>)
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ef0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ef4:	d01a      	beq.n	8003f2c <UART_SetConfig+0x2c8>
 8003ef6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003efa:	d81b      	bhi.n	8003f34 <UART_SetConfig+0x2d0>
 8003efc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f00:	d00c      	beq.n	8003f1c <UART_SetConfig+0x2b8>
 8003f02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f06:	d815      	bhi.n	8003f34 <UART_SetConfig+0x2d0>
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <UART_SetConfig+0x2b0>
 8003f0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f10:	d008      	beq.n	8003f24 <UART_SetConfig+0x2c0>
 8003f12:	e00f      	b.n	8003f34 <UART_SetConfig+0x2d0>
 8003f14:	2300      	movs	r3, #0
 8003f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f1a:	e022      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f22:	e01e      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003f24:	2304      	movs	r3, #4
 8003f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f2a:	e01a      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003f2c:	2308      	movs	r3, #8
 8003f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f32:	e016      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003f34:	2310      	movs	r3, #16
 8003f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f3a:	e012      	b.n	8003f62 <UART_SetConfig+0x2fe>
 8003f3c:	cfff69f3 	.word	0xcfff69f3
 8003f40:	40008000 	.word	0x40008000
 8003f44:	40013800 	.word	0x40013800
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	40004400 	.word	0x40004400
 8003f50:	40004800 	.word	0x40004800
 8003f54:	40004c00 	.word	0x40004c00
 8003f58:	40005000 	.word	0x40005000
 8003f5c:	2310      	movs	r3, #16
 8003f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4ab0      	ldr	r2, [pc, #704]	@ (8004228 <UART_SetConfig+0x5c4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	f040 809b 	bne.w	80040a4 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d827      	bhi.n	8003fc6 <UART_SetConfig+0x362>
 8003f76:	a201      	add	r2, pc, #4	@ (adr r2, 8003f7c <UART_SetConfig+0x318>)
 8003f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7c:	08003fa1 	.word	0x08003fa1
 8003f80:	08003fa9 	.word	0x08003fa9
 8003f84:	08003fb1 	.word	0x08003fb1
 8003f88:	08003fc7 	.word	0x08003fc7
 8003f8c:	08003fb7 	.word	0x08003fb7
 8003f90:	08003fc7 	.word	0x08003fc7
 8003f94:	08003fc7 	.word	0x08003fc7
 8003f98:	08003fc7 	.word	0x08003fc7
 8003f9c:	08003fbf 	.word	0x08003fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fa0:	f7fd fe4e 	bl	8001c40 <HAL_RCC_GetPCLK1Freq>
 8003fa4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fa6:	e014      	b.n	8003fd2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fa8:	f7fd fe5e 	bl	8001c68 <HAL_RCC_GetPCLK2Freq>
 8003fac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fae:	e010      	b.n	8003fd2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fb0:	4b9e      	ldr	r3, [pc, #632]	@ (800422c <UART_SetConfig+0x5c8>)
 8003fb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003fb4:	e00d      	b.n	8003fd2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fb6:	f7fd fd91 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 8003fba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fbc:	e009      	b.n	8003fd2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003fc4:	e005      	b.n	8003fd2 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003fd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 8130 	beq.w	800423a <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fde:	4a94      	ldr	r2, [pc, #592]	@ (8004230 <UART_SetConfig+0x5cc>)
 8003fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	4413      	add	r3, r2
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d305      	bcc.n	800400a <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	429a      	cmp	r2, r3
 8004008:	d903      	bls.n	8004012 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004010:	e113      	b.n	800423a <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004014:	2200      	movs	r2, #0
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	60fa      	str	r2, [r7, #12]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401e:	4a84      	ldr	r2, [pc, #528]	@ (8004230 <UART_SetConfig+0x5cc>)
 8004020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004024:	b29b      	uxth	r3, r3
 8004026:	2200      	movs	r2, #0
 8004028:	603b      	str	r3, [r7, #0]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004030:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004034:	f7fc f8fe 	bl	8000234 <__aeabi_uldivmod>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4610      	mov	r0, r2
 800403e:	4619      	mov	r1, r3
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	020b      	lsls	r3, r1, #8
 800404a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800404e:	0202      	lsls	r2, r0, #8
 8004050:	6979      	ldr	r1, [r7, #20]
 8004052:	6849      	ldr	r1, [r1, #4]
 8004054:	0849      	lsrs	r1, r1, #1
 8004056:	2000      	movs	r0, #0
 8004058:	460c      	mov	r4, r1
 800405a:	4605      	mov	r5, r0
 800405c:	eb12 0804 	adds.w	r8, r2, r4
 8004060:	eb43 0905 	adc.w	r9, r3, r5
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	469a      	mov	sl, r3
 800406c:	4693      	mov	fp, r2
 800406e:	4652      	mov	r2, sl
 8004070:	465b      	mov	r3, fp
 8004072:	4640      	mov	r0, r8
 8004074:	4649      	mov	r1, r9
 8004076:	f7fc f8dd 	bl	8000234 <__aeabi_uldivmod>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4613      	mov	r3, r2
 8004080:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004088:	d308      	bcc.n	800409c <UART_SetConfig+0x438>
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004090:	d204      	bcs.n	800409c <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6a3a      	ldr	r2, [r7, #32]
 8004098:	60da      	str	r2, [r3, #12]
 800409a:	e0ce      	b.n	800423a <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80040a2:	e0ca      	b.n	800423a <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040ac:	d166      	bne.n	800417c <UART_SetConfig+0x518>
  {
    switch (clocksource)
 80040ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d827      	bhi.n	8004106 <UART_SetConfig+0x4a2>
 80040b6:	a201      	add	r2, pc, #4	@ (adr r2, 80040bc <UART_SetConfig+0x458>)
 80040b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040bc:	080040e1 	.word	0x080040e1
 80040c0:	080040e9 	.word	0x080040e9
 80040c4:	080040f1 	.word	0x080040f1
 80040c8:	08004107 	.word	0x08004107
 80040cc:	080040f7 	.word	0x080040f7
 80040d0:	08004107 	.word	0x08004107
 80040d4:	08004107 	.word	0x08004107
 80040d8:	08004107 	.word	0x08004107
 80040dc:	080040ff 	.word	0x080040ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040e0:	f7fd fdae 	bl	8001c40 <HAL_RCC_GetPCLK1Freq>
 80040e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040e6:	e014      	b.n	8004112 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040e8:	f7fd fdbe 	bl	8001c68 <HAL_RCC_GetPCLK2Freq>
 80040ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040ee:	e010      	b.n	8004112 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040f0:	4b4e      	ldr	r3, [pc, #312]	@ (800422c <UART_SetConfig+0x5c8>)
 80040f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80040f4:	e00d      	b.n	8004112 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040f6:	f7fd fcf1 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 80040fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040fc:	e009      	b.n	8004112 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004102:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004104:	e005      	b.n	8004112 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004110:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 8090 	beq.w	800423a <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411e:	4a44      	ldr	r2, [pc, #272]	@ (8004230 <UART_SetConfig+0x5cc>)
 8004120:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004124:	461a      	mov	r2, r3
 8004126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004128:	fbb3 f3f2 	udiv	r3, r3, r2
 800412c:	005a      	lsls	r2, r3, #1
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	085b      	lsrs	r3, r3, #1
 8004134:	441a      	add	r2, r3
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	fbb2 f3f3 	udiv	r3, r2, r3
 800413e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	2b0f      	cmp	r3, #15
 8004144:	d916      	bls.n	8004174 <UART_SetConfig+0x510>
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800414c:	d212      	bcs.n	8004174 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	b29b      	uxth	r3, r3
 8004152:	f023 030f 	bic.w	r3, r3, #15
 8004156:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	085b      	lsrs	r3, r3, #1
 800415c:	b29b      	uxth	r3, r3
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	b29a      	uxth	r2, r3
 8004164:	8bfb      	ldrh	r3, [r7, #30]
 8004166:	4313      	orrs	r3, r2
 8004168:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	8bfa      	ldrh	r2, [r7, #30]
 8004170:	60da      	str	r2, [r3, #12]
 8004172:	e062      	b.n	800423a <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800417a:	e05e      	b.n	800423a <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800417c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004180:	2b08      	cmp	r3, #8
 8004182:	d828      	bhi.n	80041d6 <UART_SetConfig+0x572>
 8004184:	a201      	add	r2, pc, #4	@ (adr r2, 800418c <UART_SetConfig+0x528>)
 8004186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418a:	bf00      	nop
 800418c:	080041b1 	.word	0x080041b1
 8004190:	080041b9 	.word	0x080041b9
 8004194:	080041c1 	.word	0x080041c1
 8004198:	080041d7 	.word	0x080041d7
 800419c:	080041c7 	.word	0x080041c7
 80041a0:	080041d7 	.word	0x080041d7
 80041a4:	080041d7 	.word	0x080041d7
 80041a8:	080041d7 	.word	0x080041d7
 80041ac:	080041cf 	.word	0x080041cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041b0:	f7fd fd46 	bl	8001c40 <HAL_RCC_GetPCLK1Freq>
 80041b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041b6:	e014      	b.n	80041e2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041b8:	f7fd fd56 	bl	8001c68 <HAL_RCC_GetPCLK2Freq>
 80041bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041be:	e010      	b.n	80041e2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041c0:	4b1a      	ldr	r3, [pc, #104]	@ (800422c <UART_SetConfig+0x5c8>)
 80041c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041c4:	e00d      	b.n	80041e2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041c6:	f7fd fc89 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 80041ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041cc:	e009      	b.n	80041e2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041d4:	e005      	b.n	80041e2 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80041e0:	bf00      	nop
    }

    if (pclk != 0U)
 80041e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d028      	beq.n	800423a <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ec:	4a10      	ldr	r2, [pc, #64]	@ (8004230 <UART_SetConfig+0x5cc>)
 80041ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041f2:	461a      	mov	r2, r3
 80041f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	085b      	lsrs	r3, r3, #1
 8004200:	441a      	add	r2, r3
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	fbb2 f3f3 	udiv	r3, r2, r3
 800420a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	2b0f      	cmp	r3, #15
 8004210:	d910      	bls.n	8004234 <UART_SetConfig+0x5d0>
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004218:	d20c      	bcs.n	8004234 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	b29a      	uxth	r2, r3
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	60da      	str	r2, [r3, #12]
 8004224:	e009      	b.n	800423a <UART_SetConfig+0x5d6>
 8004226:	bf00      	nop
 8004228:	40008000 	.word	0x40008000
 800422c:	00f42400 	.word	0x00f42400
 8004230:	08005780 	.word	0x08005780
      }
      else
      {
        ret = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2201      	movs	r2, #1
 800423e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2201      	movs	r2, #1
 8004246:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2200      	movs	r2, #0
 800424e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2200      	movs	r2, #0
 8004254:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004256:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800425a:	4618      	mov	r0, r3
 800425c:	3730      	adds	r7, #48	@ 0x30
 800425e:	46bd      	mov	sp, r7
 8004260:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004264 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00a      	beq.n	800428e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00a      	beq.n	80042d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00a      	beq.n	80042f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01a      	beq.n	800437a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004362:	d10a      	bne.n	800437a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	605a      	str	r2, [r3, #4]
  }
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b098      	sub	sp, #96	@ 0x60
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043b8:	f7fc f928 	bl	800060c <HAL_GetTick>
 80043bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d12f      	bne.n	800442c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043d4:	2200      	movs	r2, #0
 80043d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f88e 	bl	80044fc <UART_WaitOnFlagUntilTimeout>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d022      	beq.n	800442c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ee:	e853 3f00 	ldrex	r3, [r3]
 80043f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	461a      	mov	r2, r3
 8004402:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004404:	647b      	str	r3, [r7, #68]	@ 0x44
 8004406:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004408:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800440a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800440c:	e841 2300 	strex	r3, r2, [r1]
 8004410:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e6      	bne.n	80043e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2220      	movs	r2, #32
 800441c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e063      	b.n	80044f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b04      	cmp	r3, #4
 8004438:	d149      	bne.n	80044ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800443a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004442:	2200      	movs	r2, #0
 8004444:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f857 	bl	80044fc <UART_WaitOnFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d03c      	beq.n	80044ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	e853 3f00 	ldrex	r3, [r3]
 8004460:	623b      	str	r3, [r7, #32]
   return(result);
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004468:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004472:	633b      	str	r3, [r7, #48]	@ 0x30
 8004474:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004476:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004478:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1e6      	bne.n	8004454 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3308      	adds	r3, #8
 800448c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	e853 3f00 	ldrex	r3, [r3]
 8004494:	60fb      	str	r3, [r7, #12]
   return(result);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f023 0301 	bic.w	r3, r3, #1
 800449c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3308      	adds	r3, #8
 80044a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044a6:	61fa      	str	r2, [r7, #28]
 80044a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044aa:	69b9      	ldr	r1, [r7, #24]
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	e841 2300 	strex	r3, r2, [r1]
 80044b2:	617b      	str	r3, [r7, #20]
   return(result);
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1e5      	bne.n	8004486 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e012      	b.n	80044f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2220      	movs	r2, #32
 80044da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3758      	adds	r7, #88	@ 0x58
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	4613      	mov	r3, r2
 800450a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800450c:	e04f      	b.n	80045ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004514:	d04b      	beq.n	80045ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004516:	f7fc f879 	bl	800060c <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	429a      	cmp	r2, r3
 8004524:	d302      	bcc.n	800452c <UART_WaitOnFlagUntilTimeout+0x30>
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e04e      	b.n	80045ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	2b00      	cmp	r3, #0
 800453c:	d037      	beq.n	80045ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b80      	cmp	r3, #128	@ 0x80
 8004542:	d034      	beq.n	80045ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b40      	cmp	r3, #64	@ 0x40
 8004548:	d031      	beq.n	80045ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b08      	cmp	r3, #8
 8004556:	d110      	bne.n	800457a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2208      	movs	r2, #8
 800455e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 f838 	bl	80045d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2208      	movs	r2, #8
 800456a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e029      	b.n	80045ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004584:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004588:	d111      	bne.n	80045ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004592:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 f81e 	bl	80045d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2220      	movs	r2, #32
 800459e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e00f      	b.n	80045ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	69da      	ldr	r2, [r3, #28]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4013      	ands	r3, r2
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	bf0c      	ite	eq
 80045be:	2301      	moveq	r3, #1
 80045c0:	2300      	movne	r3, #0
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	461a      	mov	r2, r3
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d0a0      	beq.n	800450e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b095      	sub	sp, #84	@ 0x54
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045e6:	e853 3f00 	ldrex	r3, [r3]
 80045ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80045fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004600:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004602:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004604:	e841 2300 	strex	r3, r2, [r1]
 8004608:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800460a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1e6      	bne.n	80045de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3308      	adds	r3, #8
 8004616:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	e853 3f00 	ldrex	r3, [r3]
 800461e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004626:	f023 0301 	bic.w	r3, r3, #1
 800462a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3308      	adds	r3, #8
 8004632:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004634:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004636:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800463a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800463c:	e841 2300 	strex	r3, r2, [r1]
 8004640:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e3      	bne.n	8004610 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800464c:	2b01      	cmp	r3, #1
 800464e:	d118      	bne.n	8004682 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	60bb      	str	r3, [r7, #8]
   return(result);
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f023 0310 	bic.w	r3, r3, #16
 8004664:	647b      	str	r3, [r7, #68]	@ 0x44
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800466e:	61bb      	str	r3, [r7, #24]
 8004670:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	6979      	ldr	r1, [r7, #20]
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	613b      	str	r3, [r7, #16]
   return(result);
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e6      	bne.n	8004650 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004696:	bf00      	nop
 8004698:	3754      	adds	r7, #84	@ 0x54
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b085      	sub	sp, #20
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_UARTEx_DisableFifoMode+0x16>
 80046b4:	2302      	movs	r3, #2
 80046b6:	e027      	b.n	8004708 <HAL_UARTEx_DisableFifoMode+0x66>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2224      	movs	r2, #36	@ 0x24
 80046c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0201 	bic.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80046e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004728:	2302      	movs	r3, #2
 800472a:	e02d      	b.n	8004788 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2224      	movs	r2, #36	@ 0x24
 8004738:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0201 	bic.w	r2, r2, #1
 8004752:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f84f 	bl	800480c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2220      	movs	r2, #32
 800477a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e02d      	b.n	8004804 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2224      	movs	r2, #36	@ 0x24
 80047b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0201 	bic.w	r2, r2, #1
 80047ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f811 	bl	800480c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004818:	2b00      	cmp	r3, #0
 800481a:	d108      	bne.n	800482e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800482c:	e031      	b.n	8004892 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800482e:	2308      	movs	r3, #8
 8004830:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004832:	2308      	movs	r3, #8
 8004834:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	0e5b      	lsrs	r3, r3, #25
 800483e:	b2db      	uxtb	r3, r3
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	0f5b      	lsrs	r3, r3, #29
 800484e:	b2db      	uxtb	r3, r3
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004856:	7bbb      	ldrb	r3, [r7, #14]
 8004858:	7b3a      	ldrb	r2, [r7, #12]
 800485a:	4911      	ldr	r1, [pc, #68]	@ (80048a0 <UARTEx_SetNbDataToProcess+0x94>)
 800485c:	5c8a      	ldrb	r2, [r1, r2]
 800485e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004862:	7b3a      	ldrb	r2, [r7, #12]
 8004864:	490f      	ldr	r1, [pc, #60]	@ (80048a4 <UARTEx_SetNbDataToProcess+0x98>)
 8004866:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004868:	fb93 f3f2 	sdiv	r3, r3, r2
 800486c:	b29a      	uxth	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004874:	7bfb      	ldrb	r3, [r7, #15]
 8004876:	7b7a      	ldrb	r2, [r7, #13]
 8004878:	4909      	ldr	r1, [pc, #36]	@ (80048a0 <UARTEx_SetNbDataToProcess+0x94>)
 800487a:	5c8a      	ldrb	r2, [r1, r2]
 800487c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004880:	7b7a      	ldrb	r2, [r7, #13]
 8004882:	4908      	ldr	r1, [pc, #32]	@ (80048a4 <UARTEx_SetNbDataToProcess+0x98>)
 8004884:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004886:	fb93 f3f2 	sdiv	r3, r3, r2
 800488a:	b29a      	uxth	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004892:	bf00      	nop
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	08005798 	.word	0x08005798
 80048a4:	080057a0 	.word	0x080057a0

080048a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80048b0:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80048b4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	43db      	mvns	r3, r3
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	4013      	ands	r3, r2
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80048de:	b480      	push	{r7}
 80048e0:	b085      	sub	sp, #20
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	1d3b      	adds	r3, r7, #4
 80048e8:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800491e:	f7fb fe47 	bl	80005b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004922:	f000 f810 	bl	8004946 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004926:	f000 fac5 	bl	8004eb4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800492a:	f000 f86f 	bl	8004a0c <MX_TIM1_Init>
  MX_TIM2_Init();
 800492e:	f000 f935 	bl	8004b9c <MX_TIM2_Init>
  MX_TIM3_Init();
 8004932:	f000 f9bf 	bl	8004cb4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8004936:	f000 fa49 	bl	8004dcc <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 800493a:	f000 fa93 	bl	8004e64 <MX_USB_PCD_Init>
  MX_ICACHE_Init();
 800493e:	f000 f851 	bl	80049e4 <MX_ICACHE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004942:	bf00      	nop
 8004944:	e7fd      	b.n	8004942 <main+0x28>

08004946 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b098      	sub	sp, #96	@ 0x60
 800494a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800494c:	f107 0318 	add.w	r3, r7, #24
 8004950:	2248      	movs	r2, #72	@ 0x48
 8004952:	2100      	movs	r1, #0
 8004954:	4618      	mov	r0, r3
 8004956:	f000 feda 	bl	800570e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800495a:	1d3b      	adds	r3, r7, #4
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	605a      	str	r2, [r3, #4]
 8004962:	609a      	str	r2, [r3, #8]
 8004964:	60da      	str	r2, [r3, #12]
 8004966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8004968:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800496c:	f7fc fa08 	bl	8000d80 <HAL_PWREx_ControlVoltageScaling>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8004976:	f000 fb59 	bl	800502c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800497a:	2301      	movs	r3, #1
 800497c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800497e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004982:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004984:	2302      	movs	r3, #2
 8004986:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004988:	2303      	movs	r3, #3
 800498a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800498c:	2301      	movs	r3, #1
 800498e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8004990:	2308      	movs	r3, #8
 8004992:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004994:	2307      	movs	r3, #7
 8004996:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004998:	2302      	movs	r3, #2
 800499a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800499c:	2302      	movs	r3, #2
 800499e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049a0:	f107 0318 	add.w	r3, r7, #24
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fc fa8b 	bl	8000ec0 <HAL_RCC_OscConfig>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80049b0:	f000 fb3c 	bl	800502c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049b4:	230f      	movs	r3, #15
 80049b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049b8:	2303      	movs	r3, #3
 80049ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80049bc:	2380      	movs	r3, #128	@ 0x80
 80049be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80049c0:	2300      	movs	r3, #0
 80049c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80049c8:	1d3b      	adds	r3, r7, #4
 80049ca:	2101      	movs	r1, #1
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fc ff4d 	bl	800186c <HAL_RCC_ClockConfig>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <SystemClock_Config+0x96>
  {
    Error_Handler();
 80049d8:	f000 fb28 	bl	800502c <Error_Handler>
  }
}
 80049dc:	bf00      	nop
 80049de:	3760      	adds	r7, #96	@ 0x60
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80049e8:	2000      	movs	r0, #0
 80049ea:	f7fc f893 	bl	8000b14 <HAL_ICACHE_ConfigAssociativityMode>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80049f4:	f000 fb1a 	bl	800502c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80049f8:	f7fc f8ac 	bl	8000b54 <HAL_ICACHE_Enable>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8004a02:	f000 fb13 	bl	800502c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8004a06:	bf00      	nop
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b09c      	sub	sp, #112	@ 0x70
 8004a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a12:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004a16:	2200      	movs	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	605a      	str	r2, [r3, #4]
 8004a1c:	609a      	str	r2, [r3, #8]
 8004a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a20:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	605a      	str	r2, [r3, #4]
 8004a2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a2c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	609a      	str	r2, [r3, #8]
 8004a38:	60da      	str	r2, [r3, #12]
 8004a3a:	611a      	str	r2, [r3, #16]
 8004a3c:	615a      	str	r2, [r3, #20]
 8004a3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004a40:	1d3b      	adds	r3, r7, #4
 8004a42:	2234      	movs	r2, #52	@ 0x34
 8004a44:	2100      	movs	r1, #0
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fe61 	bl	800570e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004a4c:	4b51      	ldr	r3, [pc, #324]	@ (8004b94 <MX_TIM1_Init+0x188>)
 8004a4e:	4a52      	ldr	r2, [pc, #328]	@ (8004b98 <MX_TIM1_Init+0x18c>)
 8004a50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 29;
 8004a52:	4b50      	ldr	r3, [pc, #320]	@ (8004b94 <MX_TIM1_Init+0x188>)
 8004a54:	221d      	movs	r2, #29
 8004a56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a58:	4b4e      	ldr	r3, [pc, #312]	@ (8004b94 <MX_TIM1_Init+0x188>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8004a5e:	4b4d      	ldr	r3, [pc, #308]	@ (8004b94 <MX_TIM1_Init+0x188>)
 8004a60:	22ff      	movs	r2, #255	@ 0xff
 8004a62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a64:	4b4b      	ldr	r3, [pc, #300]	@ (8004b94 <MX_TIM1_Init+0x188>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8004b94 <MX_TIM1_Init+0x188>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a70:	4b48      	ldr	r3, [pc, #288]	@ (8004b94 <MX_TIM1_Init+0x188>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004a76:	4847      	ldr	r0, [pc, #284]	@ (8004b94 <MX_TIM1_Init+0x188>)
 8004a78:	f7fd ff24 	bl	80028c4 <HAL_TIM_Base_Init>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004a82:	f000 fad3 	bl	800502c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a8a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004a8c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004a90:	4619      	mov	r1, r3
 8004a92:	4840      	ldr	r0, [pc, #256]	@ (8004b94 <MX_TIM1_Init+0x188>)
 8004a94:	f7fe fa5a 	bl	8002f4c <HAL_TIM_ConfigClockSource>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004a9e:	f000 fac5 	bl	800502c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004aa2:	483c      	ldr	r0, [pc, #240]	@ (8004b94 <MX_TIM1_Init+0x188>)
 8004aa4:	f7fd ffd6 	bl	8002a54 <HAL_TIM_PWM_Init>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004aae:	f000 fabd 	bl	800502c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004aba:	2300      	movs	r3, #0
 8004abc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004abe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	4833      	ldr	r0, [pc, #204]	@ (8004b94 <MX_TIM1_Init+0x188>)
 8004ac6:	f7fe ff4b 	bl	8003960 <HAL_TIMEx_MasterConfigSynchronization>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8004ad0:	f000 faac 	bl	800502c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ad4:	2360      	movs	r3, #96	@ 0x60
 8004ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004adc:	2302      	movs	r3, #2
 8004ade:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004aec:	2300      	movs	r3, #0
 8004aee:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004af0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004af4:	2200      	movs	r2, #0
 8004af6:	4619      	mov	r1, r3
 8004af8:	4826      	ldr	r0, [pc, #152]	@ (8004b94 <MX_TIM1_Init+0x188>)
 8004afa:	f7fe f913 	bl	8002d24 <HAL_TIM_PWM_ConfigChannel>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8004b04:	f000 fa92 	bl	800502c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004b08:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004b0c:	2204      	movs	r2, #4
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4820      	ldr	r0, [pc, #128]	@ (8004b94 <MX_TIM1_Init+0x188>)
 8004b12:	f7fe f907 	bl	8002d24 <HAL_TIM_PWM_ConfigChannel>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8004b1c:	f000 fa86 	bl	800502c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004b20:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004b24:	2208      	movs	r2, #8
 8004b26:	4619      	mov	r1, r3
 8004b28:	481a      	ldr	r0, [pc, #104]	@ (8004b94 <MX_TIM1_Init+0x188>)
 8004b2a:	f7fe f8fb 	bl	8002d24 <HAL_TIM_PWM_ConfigChannel>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8004b34:	f000 fa7a 	bl	800502c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004b40:	2300      	movs	r3, #0
 8004b42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004b44:	2300      	movs	r3, #0
 8004b46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004b4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004b50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004b52:	2300      	movs	r3, #0
 8004b54:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004b56:	2300      	movs	r3, #0
 8004b58:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004b5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b62:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004b64:	2300      	movs	r3, #0
 8004b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004b70:	1d3b      	adds	r3, r7, #4
 8004b72:	4619      	mov	r1, r3
 8004b74:	4807      	ldr	r0, [pc, #28]	@ (8004b94 <MX_TIM1_Init+0x188>)
 8004b76:	f7fe ff7b 	bl	8003a70 <HAL_TIMEx_ConfigBreakDeadTime>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 8004b80:	f000 fa54 	bl	800502c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004b84:	4803      	ldr	r0, [pc, #12]	@ (8004b94 <MX_TIM1_Init+0x188>)
 8004b86:	f000 fac1 	bl	800510c <HAL_TIM_MspPostInit>

}
 8004b8a:	bf00      	nop
 8004b8c:	3770      	adds	r7, #112	@ 0x70
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	2000002c 	.word	0x2000002c
 8004b98:	40012c00 	.word	0x40012c00

08004b9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08e      	sub	sp, #56	@ 0x38
 8004ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ba2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	605a      	str	r2, [r3, #4]
 8004bac:	609a      	str	r2, [r3, #8]
 8004bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bb0:	f107 031c 	add.w	r3, r7, #28
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	605a      	str	r2, [r3, #4]
 8004bba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bbc:	463b      	mov	r3, r7
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	605a      	str	r2, [r3, #4]
 8004bc4:	609a      	str	r2, [r3, #8]
 8004bc6:	60da      	str	r2, [r3, #12]
 8004bc8:	611a      	str	r2, [r3, #16]
 8004bca:	615a      	str	r2, [r3, #20]
 8004bcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004bce:	4b38      	ldr	r3, [pc, #224]	@ (8004cb0 <MX_TIM2_Init+0x114>)
 8004bd0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004bd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 29;
 8004bd6:	4b36      	ldr	r3, [pc, #216]	@ (8004cb0 <MX_TIM2_Init+0x114>)
 8004bd8:	221d      	movs	r2, #29
 8004bda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bdc:	4b34      	ldr	r3, [pc, #208]	@ (8004cb0 <MX_TIM2_Init+0x114>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8004be2:	4b33      	ldr	r3, [pc, #204]	@ (8004cb0 <MX_TIM2_Init+0x114>)
 8004be4:	22ff      	movs	r2, #255	@ 0xff
 8004be6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004be8:	4b31      	ldr	r3, [pc, #196]	@ (8004cb0 <MX_TIM2_Init+0x114>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bee:	4b30      	ldr	r3, [pc, #192]	@ (8004cb0 <MX_TIM2_Init+0x114>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004bf4:	482e      	ldr	r0, [pc, #184]	@ (8004cb0 <MX_TIM2_Init+0x114>)
 8004bf6:	f7fd fe65 	bl	80028c4 <HAL_TIM_Base_Init>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004c00:	f000 fa14 	bl	800502c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c08:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004c0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4827      	ldr	r0, [pc, #156]	@ (8004cb0 <MX_TIM2_Init+0x114>)
 8004c12:	f7fe f99b 	bl	8002f4c <HAL_TIM_ConfigClockSource>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004c1c:	f000 fa06 	bl	800502c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004c20:	4823      	ldr	r0, [pc, #140]	@ (8004cb0 <MX_TIM2_Init+0x114>)
 8004c22:	f7fd ff17 	bl	8002a54 <HAL_TIM_PWM_Init>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004c2c:	f000 f9fe 	bl	800502c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c30:	2300      	movs	r3, #0
 8004c32:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c34:	2300      	movs	r3, #0
 8004c36:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004c38:	f107 031c 	add.w	r3, r7, #28
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	481c      	ldr	r0, [pc, #112]	@ (8004cb0 <MX_TIM2_Init+0x114>)
 8004c40:	f7fe fe8e 	bl	8003960 <HAL_TIMEx_MasterConfigSynchronization>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004c4a:	f000 f9ef 	bl	800502c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c4e:	2360      	movs	r3, #96	@ 0x60
 8004c50:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004c52:	2300      	movs	r3, #0
 8004c54:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004c56:	2302      	movs	r3, #2
 8004c58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c5e:	463b      	mov	r3, r7
 8004c60:	2200      	movs	r2, #0
 8004c62:	4619      	mov	r1, r3
 8004c64:	4812      	ldr	r0, [pc, #72]	@ (8004cb0 <MX_TIM2_Init+0x114>)
 8004c66:	f7fe f85d 	bl	8002d24 <HAL_TIM_PWM_ConfigChannel>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004c70:	f000 f9dc 	bl	800502c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004c74:	463b      	mov	r3, r7
 8004c76:	2204      	movs	r2, #4
 8004c78:	4619      	mov	r1, r3
 8004c7a:	480d      	ldr	r0, [pc, #52]	@ (8004cb0 <MX_TIM2_Init+0x114>)
 8004c7c:	f7fe f852 	bl	8002d24 <HAL_TIM_PWM_ConfigChannel>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8004c86:	f000 f9d1 	bl	800502c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004c8a:	463b      	mov	r3, r7
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4807      	ldr	r0, [pc, #28]	@ (8004cb0 <MX_TIM2_Init+0x114>)
 8004c92:	f7fe f847 	bl	8002d24 <HAL_TIM_PWM_ConfigChannel>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8004c9c:	f000 f9c6 	bl	800502c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004ca0:	4803      	ldr	r0, [pc, #12]	@ (8004cb0 <MX_TIM2_Init+0x114>)
 8004ca2:	f000 fa33 	bl	800510c <HAL_TIM_MspPostInit>

}
 8004ca6:	bf00      	nop
 8004ca8:	3738      	adds	r7, #56	@ 0x38
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000078 	.word	0x20000078

08004cb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08e      	sub	sp, #56	@ 0x38
 8004cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	605a      	str	r2, [r3, #4]
 8004cc4:	609a      	str	r2, [r3, #8]
 8004cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cc8:	f107 031c 	add.w	r3, r7, #28
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	605a      	str	r2, [r3, #4]
 8004cd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004cd4:	463b      	mov	r3, r7
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	605a      	str	r2, [r3, #4]
 8004cdc:	609a      	str	r2, [r3, #8]
 8004cde:	60da      	str	r2, [r3, #12]
 8004ce0:	611a      	str	r2, [r3, #16]
 8004ce2:	615a      	str	r2, [r3, #20]
 8004ce4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004ce6:	4b37      	ldr	r3, [pc, #220]	@ (8004dc4 <MX_TIM3_Init+0x110>)
 8004ce8:	4a37      	ldr	r2, [pc, #220]	@ (8004dc8 <MX_TIM3_Init+0x114>)
 8004cea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 29;
 8004cec:	4b35      	ldr	r3, [pc, #212]	@ (8004dc4 <MX_TIM3_Init+0x110>)
 8004cee:	221d      	movs	r2, #29
 8004cf0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cf2:	4b34      	ldr	r3, [pc, #208]	@ (8004dc4 <MX_TIM3_Init+0x110>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8004cf8:	4b32      	ldr	r3, [pc, #200]	@ (8004dc4 <MX_TIM3_Init+0x110>)
 8004cfa:	22ff      	movs	r2, #255	@ 0xff
 8004cfc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cfe:	4b31      	ldr	r3, [pc, #196]	@ (8004dc4 <MX_TIM3_Init+0x110>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d04:	4b2f      	ldr	r3, [pc, #188]	@ (8004dc4 <MX_TIM3_Init+0x110>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004d0a:	482e      	ldr	r0, [pc, #184]	@ (8004dc4 <MX_TIM3_Init+0x110>)
 8004d0c:	f7fd fdda 	bl	80028c4 <HAL_TIM_Base_Init>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004d16:	f000 f989 	bl	800502c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004d20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d24:	4619      	mov	r1, r3
 8004d26:	4827      	ldr	r0, [pc, #156]	@ (8004dc4 <MX_TIM3_Init+0x110>)
 8004d28:	f7fe f910 	bl	8002f4c <HAL_TIM_ConfigClockSource>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004d32:	f000 f97b 	bl	800502c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004d36:	4823      	ldr	r0, [pc, #140]	@ (8004dc4 <MX_TIM3_Init+0x110>)
 8004d38:	f7fd fe8c 	bl	8002a54 <HAL_TIM_PWM_Init>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004d42:	f000 f973 	bl	800502c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d46:	2300      	movs	r3, #0
 8004d48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004d4e:	f107 031c 	add.w	r3, r7, #28
 8004d52:	4619      	mov	r1, r3
 8004d54:	481b      	ldr	r0, [pc, #108]	@ (8004dc4 <MX_TIM3_Init+0x110>)
 8004d56:	f7fe fe03 	bl	8003960 <HAL_TIMEx_MasterConfigSynchronization>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004d60:	f000 f964 	bl	800502c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d64:	2360      	movs	r3, #96	@ 0x60
 8004d66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d70:	2300      	movs	r3, #0
 8004d72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d74:	463b      	mov	r3, r7
 8004d76:	2200      	movs	r2, #0
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4812      	ldr	r0, [pc, #72]	@ (8004dc4 <MX_TIM3_Init+0x110>)
 8004d7c:	f7fd ffd2 	bl	8002d24 <HAL_TIM_PWM_ConfigChannel>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004d86:	f000 f951 	bl	800502c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004d8a:	463b      	mov	r3, r7
 8004d8c:	2204      	movs	r2, #4
 8004d8e:	4619      	mov	r1, r3
 8004d90:	480c      	ldr	r0, [pc, #48]	@ (8004dc4 <MX_TIM3_Init+0x110>)
 8004d92:	f7fd ffc7 	bl	8002d24 <HAL_TIM_PWM_ConfigChannel>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004d9c:	f000 f946 	bl	800502c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004da0:	463b      	mov	r3, r7
 8004da2:	2208      	movs	r2, #8
 8004da4:	4619      	mov	r1, r3
 8004da6:	4807      	ldr	r0, [pc, #28]	@ (8004dc4 <MX_TIM3_Init+0x110>)
 8004da8:	f7fd ffbc 	bl	8002d24 <HAL_TIM_PWM_ConfigChannel>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8004db2:	f000 f93b 	bl	800502c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004db6:	4803      	ldr	r0, [pc, #12]	@ (8004dc4 <MX_TIM3_Init+0x110>)
 8004db8:	f000 f9a8 	bl	800510c <HAL_TIM_MspPostInit>

}
 8004dbc:	bf00      	nop
 8004dbe:	3738      	adds	r7, #56	@ 0x38
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	200000c4 	.word	0x200000c4
 8004dc8:	40000400 	.word	0x40000400

08004dcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004dd0:	4b22      	ldr	r3, [pc, #136]	@ (8004e5c <MX_USART1_UART_Init+0x90>)
 8004dd2:	4a23      	ldr	r2, [pc, #140]	@ (8004e60 <MX_USART1_UART_Init+0x94>)
 8004dd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004dd6:	4b21      	ldr	r3, [pc, #132]	@ (8004e5c <MX_USART1_UART_Init+0x90>)
 8004dd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004ddc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004dde:	4b1f      	ldr	r3, [pc, #124]	@ (8004e5c <MX_USART1_UART_Init+0x90>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004de4:	4b1d      	ldr	r3, [pc, #116]	@ (8004e5c <MX_USART1_UART_Init+0x90>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004dea:	4b1c      	ldr	r3, [pc, #112]	@ (8004e5c <MX_USART1_UART_Init+0x90>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004df0:	4b1a      	ldr	r3, [pc, #104]	@ (8004e5c <MX_USART1_UART_Init+0x90>)
 8004df2:	220c      	movs	r2, #12
 8004df4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004df6:	4b19      	ldr	r3, [pc, #100]	@ (8004e5c <MX_USART1_UART_Init+0x90>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dfc:	4b17      	ldr	r3, [pc, #92]	@ (8004e5c <MX_USART1_UART_Init+0x90>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e02:	4b16      	ldr	r3, [pc, #88]	@ (8004e5c <MX_USART1_UART_Init+0x90>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004e08:	4b14      	ldr	r3, [pc, #80]	@ (8004e5c <MX_USART1_UART_Init+0x90>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e0e:	4b13      	ldr	r3, [pc, #76]	@ (8004e5c <MX_USART1_UART_Init+0x90>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004e14:	4811      	ldr	r0, [pc, #68]	@ (8004e5c <MX_USART1_UART_Init+0x90>)
 8004e16:	f7fe fed5 	bl	8003bc4 <HAL_UART_Init>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004e20:	f000 f904 	bl	800502c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e24:	2100      	movs	r1, #0
 8004e26:	480d      	ldr	r0, [pc, #52]	@ (8004e5c <MX_USART1_UART_Init+0x90>)
 8004e28:	f7ff fc74 	bl	8004714 <HAL_UARTEx_SetTxFifoThreshold>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004e32:	f000 f8fb 	bl	800502c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e36:	2100      	movs	r1, #0
 8004e38:	4808      	ldr	r0, [pc, #32]	@ (8004e5c <MX_USART1_UART_Init+0x90>)
 8004e3a:	f7ff fca9 	bl	8004790 <HAL_UARTEx_SetRxFifoThreshold>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004e44:	f000 f8f2 	bl	800502c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004e48:	4804      	ldr	r0, [pc, #16]	@ (8004e5c <MX_USART1_UART_Init+0x90>)
 8004e4a:	f7ff fc2a 	bl	80046a2 <HAL_UARTEx_DisableFifoMode>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004e54:	f000 f8ea 	bl	800502c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004e58:	bf00      	nop
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	20000110 	.word	0x20000110
 8004e60:	40013800 	.word	0x40013800

08004e64 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8004e68:	4b10      	ldr	r3, [pc, #64]	@ (8004eac <MX_USB_PCD_Init+0x48>)
 8004e6a:	4a11      	ldr	r2, [pc, #68]	@ (8004eb0 <MX_USB_PCD_Init+0x4c>)
 8004e6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8004eac <MX_USB_PCD_Init+0x48>)
 8004e70:	2208      	movs	r2, #8
 8004e72:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004e74:	4b0d      	ldr	r3, [pc, #52]	@ (8004eac <MX_USB_PCD_Init+0x48>)
 8004e76:	2202      	movs	r2, #2
 8004e78:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004eac <MX_USB_PCD_Init+0x48>)
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8004e80:	4b0a      	ldr	r3, [pc, #40]	@ (8004eac <MX_USB_PCD_Init+0x48>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004e86:	4b09      	ldr	r3, [pc, #36]	@ (8004eac <MX_USB_PCD_Init+0x48>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004e8c:	4b07      	ldr	r3, [pc, #28]	@ (8004eac <MX_USB_PCD_Init+0x48>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004e92:	4b06      	ldr	r3, [pc, #24]	@ (8004eac <MX_USB_PCD_Init+0x48>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004e98:	4804      	ldr	r0, [pc, #16]	@ (8004eac <MX_USB_PCD_Init+0x48>)
 8004e9a:	f7fb fe6b 	bl	8000b74 <HAL_PCD_Init>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8004ea4:	f000 f8c2 	bl	800502c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8004ea8:	bf00      	nop
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	200001a4 	.word	0x200001a4
 8004eb0:	4000d400 	.word	0x4000d400

08004eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08a      	sub	sp, #40	@ 0x28
 8004eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eba:	f107 0314 	add.w	r3, r7, #20
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	605a      	str	r2, [r3, #4]
 8004ec4:	609a      	str	r2, [r3, #8]
 8004ec6:	60da      	str	r2, [r3, #12]
 8004ec8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004eca:	4b4a      	ldr	r3, [pc, #296]	@ (8004ff4 <MX_GPIO_Init+0x140>)
 8004ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ece:	4a49      	ldr	r2, [pc, #292]	@ (8004ff4 <MX_GPIO_Init+0x140>)
 8004ed0:	f043 0304 	orr.w	r3, r3, #4
 8004ed4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ed6:	4b47      	ldr	r3, [pc, #284]	@ (8004ff4 <MX_GPIO_Init+0x140>)
 8004ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004ee2:	4b44      	ldr	r3, [pc, #272]	@ (8004ff4 <MX_GPIO_Init+0x140>)
 8004ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ee6:	4a43      	ldr	r2, [pc, #268]	@ (8004ff4 <MX_GPIO_Init+0x140>)
 8004ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004eee:	4b41      	ldr	r3, [pc, #260]	@ (8004ff4 <MX_GPIO_Init+0x140>)
 8004ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004efa:	4b3e      	ldr	r3, [pc, #248]	@ (8004ff4 <MX_GPIO_Init+0x140>)
 8004efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004efe:	4a3d      	ldr	r2, [pc, #244]	@ (8004ff4 <MX_GPIO_Init+0x140>)
 8004f00:	f043 0301 	orr.w	r3, r3, #1
 8004f04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f06:	4b3b      	ldr	r3, [pc, #236]	@ (8004ff4 <MX_GPIO_Init+0x140>)
 8004f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	60bb      	str	r3, [r7, #8]
 8004f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f12:	4b38      	ldr	r3, [pc, #224]	@ (8004ff4 <MX_GPIO_Init+0x140>)
 8004f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f16:	4a37      	ldr	r2, [pc, #220]	@ (8004ff4 <MX_GPIO_Init+0x140>)
 8004f18:	f043 0302 	orr.w	r3, r3, #2
 8004f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f1e:	4b35      	ldr	r3, [pc, #212]	@ (8004ff4 <MX_GPIO_Init+0x140>)
 8004f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	607b      	str	r3, [r7, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_USB_Pin|LED_PWR_Pin, GPIO_PIN_RESET);
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8004f30:	4831      	ldr	r0, [pc, #196]	@ (8004ff8 <MX_GPIO_Init+0x144>)
 8004f32:	f7fb fdd7 	bl	8000ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004f36:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f40:	2300      	movs	r3, #0
 8004f42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f44:	f107 0314 	add.w	r3, r7, #20
 8004f48:	4619      	mov	r1, r3
 8004f4a:	482c      	ldr	r0, [pc, #176]	@ (8004ffc <MX_GPIO_Init+0x148>)
 8004f4c:	f7fb fc4a 	bl	80007e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8004f50:	2319      	movs	r3, #25
 8004f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f54:	2303      	movs	r3, #3
 8004f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f5c:	f107 0314 	add.w	r3, r7, #20
 8004f60:	4619      	mov	r1, r3
 8004f62:	4827      	ldr	r0, [pc, #156]	@ (8005000 <MX_GPIO_Init+0x14c>)
 8004f64:	f7fb fc3e 	bl	80007e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8004f68:	f24f 033a 	movw	r3, #61498	@ 0xf03a
 8004f6c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f72:	2300      	movs	r3, #0
 8004f74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f76:	f107 0314 	add.w	r3, r7, #20
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	481e      	ldr	r0, [pc, #120]	@ (8004ff8 <MX_GPIO_Init+0x144>)
 8004f7e:	f7fb fc31 	bl	80007e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB1_OC_Pin USB2_OC_Pin USB3_OC_Pin */
  GPIO_InitStruct.Pin = USB1_OC_Pin|USB2_OC_Pin|USB3_OC_Pin;
 8004f82:	f640 4304 	movw	r3, #3076	@ 0xc04
 8004f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f90:	f107 0314 	add.w	r3, r7, #20
 8004f94:	4619      	mov	r1, r3
 8004f96:	4818      	ldr	r0, [pc, #96]	@ (8004ff8 <MX_GPIO_Init+0x144>)
 8004f98:	f7fb fc24 	bl	80007e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_EN_BUTTON_Pin */
  GPIO_InitStruct.Pin = LED_EN_BUTTON_Pin;
 8004f9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_EN_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8004faa:	f107 0314 	add.w	r3, r7, #20
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4813      	ldr	r0, [pc, #76]	@ (8005000 <MX_GPIO_Init+0x14c>)
 8004fb2:	f7fb fc17 	bl	80007e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT_BUTTON_Pin */
  GPIO_InitStruct.Pin = BOOT_BUTTON_Pin;
 8004fb6:	2308      	movs	r3, #8
 8004fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8004fc2:	f107 0314 	add.w	r3, r7, #20
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	480e      	ldr	r0, [pc, #56]	@ (8005004 <MX_GPIO_Init+0x150>)
 8004fca:	f7fb fc0b 	bl	80007e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_USB_Pin LED_PWR_Pin */
  GPIO_InitStruct.Pin = LED_USB_Pin|LED_PWR_Pin;
 8004fce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fe0:	f107 0314 	add.w	r3, r7, #20
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4804      	ldr	r0, [pc, #16]	@ (8004ff8 <MX_GPIO_Init+0x144>)
 8004fe8:	f7fb fbfc 	bl	80007e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8004fec:	bf00      	nop
 8004fee:	3728      	adds	r7, #40	@ 0x28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	42020400 	.word	0x42020400
 8004ffc:	42020800 	.word	0x42020800
 8005000:	42020000 	.word	0x42020000
 8005004:	42021c00 	.word	0x42021c00

08005008 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a04      	ldr	r2, [pc, #16]	@ (8005028 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d101      	bne.n	800501e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800501a:	f7fb fae3 	bl	80005e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800501e:	bf00      	nop
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	40001400 	.word	0x40001400

0800502c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005030:	b672      	cpsid	i
}
 8005032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005034:	bf00      	nop
 8005036:	e7fd      	b.n	8005034 <Error_Handler+0x8>

08005038 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800503e:	4b0f      	ldr	r3, [pc, #60]	@ (800507c <HAL_MspInit+0x44>)
 8005040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005042:	4a0e      	ldr	r2, [pc, #56]	@ (800507c <HAL_MspInit+0x44>)
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	6613      	str	r3, [r2, #96]	@ 0x60
 800504a:	4b0c      	ldr	r3, [pc, #48]	@ (800507c <HAL_MspInit+0x44>)
 800504c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	607b      	str	r3, [r7, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005056:	4b09      	ldr	r3, [pc, #36]	@ (800507c <HAL_MspInit+0x44>)
 8005058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800505a:	4a08      	ldr	r2, [pc, #32]	@ (800507c <HAL_MspInit+0x44>)
 800505c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005060:	6593      	str	r3, [r2, #88]	@ 0x58
 8005062:	4b06      	ldr	r3, [pc, #24]	@ (800507c <HAL_MspInit+0x44>)
 8005064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800506a:	603b      	str	r3, [r7, #0]
 800506c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800506e:	f7fb fef3 	bl	8000e58 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005072:	bf00      	nop
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	40021000 	.word	0x40021000

08005080 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1c      	ldr	r2, [pc, #112]	@ (8005100 <HAL_TIM_Base_MspInit+0x80>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d10c      	bne.n	80050ac <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005092:	4b1c      	ldr	r3, [pc, #112]	@ (8005104 <HAL_TIM_Base_MspInit+0x84>)
 8005094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005096:	4a1b      	ldr	r2, [pc, #108]	@ (8005104 <HAL_TIM_Base_MspInit+0x84>)
 8005098:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800509c:	6613      	str	r3, [r2, #96]	@ 0x60
 800509e:	4b19      	ldr	r3, [pc, #100]	@ (8005104 <HAL_TIM_Base_MspInit+0x84>)
 80050a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050a6:	617b      	str	r3, [r7, #20]
 80050a8:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80050aa:	e022      	b.n	80050f2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050b4:	d10c      	bne.n	80050d0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80050b6:	4b13      	ldr	r3, [pc, #76]	@ (8005104 <HAL_TIM_Base_MspInit+0x84>)
 80050b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ba:	4a12      	ldr	r2, [pc, #72]	@ (8005104 <HAL_TIM_Base_MspInit+0x84>)
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80050c2:	4b10      	ldr	r3, [pc, #64]	@ (8005104 <HAL_TIM_Base_MspInit+0x84>)
 80050c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	693b      	ldr	r3, [r7, #16]
}
 80050ce:	e010      	b.n	80050f2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a0c      	ldr	r2, [pc, #48]	@ (8005108 <HAL_TIM_Base_MspInit+0x88>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d10b      	bne.n	80050f2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80050da:	4b0a      	ldr	r3, [pc, #40]	@ (8005104 <HAL_TIM_Base_MspInit+0x84>)
 80050dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050de:	4a09      	ldr	r2, [pc, #36]	@ (8005104 <HAL_TIM_Base_MspInit+0x84>)
 80050e0:	f043 0302 	orr.w	r3, r3, #2
 80050e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80050e6:	4b07      	ldr	r3, [pc, #28]	@ (8005104 <HAL_TIM_Base_MspInit+0x84>)
 80050e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	68fb      	ldr	r3, [r7, #12]
}
 80050f2:	bf00      	nop
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40012c00 	.word	0x40012c00
 8005104:	40021000 	.word	0x40021000
 8005108:	40000400 	.word	0x40000400

0800510c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08c      	sub	sp, #48	@ 0x30
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005114:	f107 031c 	add.w	r3, r7, #28
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	605a      	str	r2, [r3, #4]
 800511e:	609a      	str	r2, [r3, #8]
 8005120:	60da      	str	r2, [r3, #12]
 8005122:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a41      	ldr	r2, [pc, #260]	@ (8005230 <HAL_TIM_MspPostInit+0x124>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d11d      	bne.n	800516a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800512e:	4b41      	ldr	r3, [pc, #260]	@ (8005234 <HAL_TIM_MspPostInit+0x128>)
 8005130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005132:	4a40      	ldr	r2, [pc, #256]	@ (8005234 <HAL_TIM_MspPostInit+0x128>)
 8005134:	f043 0301 	orr.w	r3, r3, #1
 8005138:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800513a:	4b3e      	ldr	r3, [pc, #248]	@ (8005234 <HAL_TIM_MspPostInit+0x128>)
 800513c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = USB1_BLUE_Pin|USB1_GREEN_Pin|USB1_RED_Pin;
 8005146:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800514a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800514c:	2302      	movs	r3, #2
 800514e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005150:	2300      	movs	r3, #0
 8005152:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005154:	2300      	movs	r3, #0
 8005156:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005158:	2301      	movs	r3, #1
 800515a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800515c:	f107 031c 	add.w	r3, r7, #28
 8005160:	4619      	mov	r1, r3
 8005162:	4835      	ldr	r0, [pc, #212]	@ (8005238 <HAL_TIM_MspPostInit+0x12c>)
 8005164:	f7fb fb3e 	bl	80007e4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005168:	e05e      	b.n	8005228 <HAL_TIM_MspPostInit+0x11c>
  else if(htim->Instance==TIM2)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005172:	d11c      	bne.n	80051ae <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005174:	4b2f      	ldr	r3, [pc, #188]	@ (8005234 <HAL_TIM_MspPostInit+0x128>)
 8005176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005178:	4a2e      	ldr	r2, [pc, #184]	@ (8005234 <HAL_TIM_MspPostInit+0x128>)
 800517a:	f043 0301 	orr.w	r3, r3, #1
 800517e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005180:	4b2c      	ldr	r3, [pc, #176]	@ (8005234 <HAL_TIM_MspPostInit+0x128>)
 8005182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USB3_BLUE_Pin|USB3_GREEN_Pin|USB3_RED_Pin;
 800518c:	2326      	movs	r3, #38	@ 0x26
 800518e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005190:	2302      	movs	r3, #2
 8005192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005194:	2300      	movs	r3, #0
 8005196:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005198:	2300      	movs	r3, #0
 800519a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800519c:	2301      	movs	r3, #1
 800519e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051a0:	f107 031c 	add.w	r3, r7, #28
 80051a4:	4619      	mov	r1, r3
 80051a6:	4824      	ldr	r0, [pc, #144]	@ (8005238 <HAL_TIM_MspPostInit+0x12c>)
 80051a8:	f7fb fb1c 	bl	80007e4 <HAL_GPIO_Init>
}
 80051ac:	e03c      	b.n	8005228 <HAL_TIM_MspPostInit+0x11c>
  else if(htim->Instance==TIM3)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a22      	ldr	r2, [pc, #136]	@ (800523c <HAL_TIM_MspPostInit+0x130>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d137      	bne.n	8005228 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005234 <HAL_TIM_MspPostInit+0x128>)
 80051ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005234 <HAL_TIM_MspPostInit+0x128>)
 80051be:	f043 0301 	orr.w	r3, r3, #1
 80051c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005234 <HAL_TIM_MspPostInit+0x128>)
 80051c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051d0:	4b18      	ldr	r3, [pc, #96]	@ (8005234 <HAL_TIM_MspPostInit+0x128>)
 80051d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051d4:	4a17      	ldr	r2, [pc, #92]	@ (8005234 <HAL_TIM_MspPostInit+0x128>)
 80051d6:	f043 0302 	orr.w	r3, r3, #2
 80051da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051dc:	4b15      	ldr	r3, [pc, #84]	@ (8005234 <HAL_TIM_MspPostInit+0x128>)
 80051de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USB2_BLUE_Pin|USB2_GREEN_Pin;
 80051e8:	23c0      	movs	r3, #192	@ 0xc0
 80051ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ec:	2302      	movs	r3, #2
 80051ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f0:	2300      	movs	r3, #0
 80051f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051f4:	2300      	movs	r3, #0
 80051f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80051f8:	2302      	movs	r3, #2
 80051fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051fc:	f107 031c 	add.w	r3, r7, #28
 8005200:	4619      	mov	r1, r3
 8005202:	480d      	ldr	r0, [pc, #52]	@ (8005238 <HAL_TIM_MspPostInit+0x12c>)
 8005204:	f7fb faee 	bl	80007e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB2_RED_Pin;
 8005208:	2301      	movs	r3, #1
 800520a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800520c:	2302      	movs	r3, #2
 800520e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005210:	2300      	movs	r3, #0
 8005212:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005214:	2300      	movs	r3, #0
 8005216:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005218:	2302      	movs	r3, #2
 800521a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(USB2_RED_GPIO_Port, &GPIO_InitStruct);
 800521c:	f107 031c 	add.w	r3, r7, #28
 8005220:	4619      	mov	r1, r3
 8005222:	4807      	ldr	r0, [pc, #28]	@ (8005240 <HAL_TIM_MspPostInit+0x134>)
 8005224:	f7fb fade 	bl	80007e4 <HAL_GPIO_Init>
}
 8005228:	bf00      	nop
 800522a:	3730      	adds	r7, #48	@ 0x30
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40012c00 	.word	0x40012c00
 8005234:	40021000 	.word	0x40021000
 8005238:	42020000 	.word	0x42020000
 800523c:	40000400 	.word	0x40000400
 8005240:	42020400 	.word	0x42020400

08005244 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b0ae      	sub	sp, #184	@ 0xb8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800524c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	605a      	str	r2, [r3, #4]
 8005256:	609a      	str	r2, [r3, #8]
 8005258:	60da      	str	r2, [r3, #12]
 800525a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800525c:	f107 0310 	add.w	r3, r7, #16
 8005260:	2294      	movs	r2, #148	@ 0x94
 8005262:	2100      	movs	r1, #0
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fa52 	bl	800570e <memset>
  if(huart->Instance==USART1)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a21      	ldr	r2, [pc, #132]	@ (80052f4 <HAL_UART_MspInit+0xb0>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d13a      	bne.n	80052ea <HAL_UART_MspInit+0xa6>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005274:	2301      	movs	r3, #1
 8005276:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8005278:	2301      	movs	r3, #1
 800527a:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800527c:	f107 0310 	add.w	r3, r7, #16
 8005280:	4618      	mov	r0, r3
 8005282:	f7fc fe09 	bl	8001e98 <HAL_RCCEx_PeriphCLKConfig>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800528c:	f7ff fece 	bl	800502c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005290:	4b19      	ldr	r3, [pc, #100]	@ (80052f8 <HAL_UART_MspInit+0xb4>)
 8005292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005294:	4a18      	ldr	r2, [pc, #96]	@ (80052f8 <HAL_UART_MspInit+0xb4>)
 8005296:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800529a:	6613      	str	r3, [r2, #96]	@ 0x60
 800529c:	4b16      	ldr	r3, [pc, #88]	@ (80052f8 <HAL_UART_MspInit+0xb4>)
 800529e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052a8:	4b13      	ldr	r3, [pc, #76]	@ (80052f8 <HAL_UART_MspInit+0xb4>)
 80052aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052ac:	4a12      	ldr	r2, [pc, #72]	@ (80052f8 <HAL_UART_MspInit+0xb4>)
 80052ae:	f043 0302 	orr.w	r3, r3, #2
 80052b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80052b4:	4b10      	ldr	r3, [pc, #64]	@ (80052f8 <HAL_UART_MspInit+0xb4>)
 80052b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	60bb      	str	r3, [r7, #8]
 80052be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80052c0:	23c0      	movs	r3, #192	@ 0xc0
 80052c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c6:	2302      	movs	r3, #2
 80052c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052cc:	2300      	movs	r3, #0
 80052ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052d2:	2300      	movs	r3, #0
 80052d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80052d8:	2307      	movs	r3, #7
 80052da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052de:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80052e2:	4619      	mov	r1, r3
 80052e4:	4805      	ldr	r0, [pc, #20]	@ (80052fc <HAL_UART_MspInit+0xb8>)
 80052e6:	f7fb fa7d 	bl	80007e4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80052ea:	bf00      	nop
 80052ec:	37b8      	adds	r7, #184	@ 0xb8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	40013800 	.word	0x40013800
 80052f8:	40021000 	.word	0x40021000
 80052fc:	42020400 	.word	0x42020400

08005300 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b0b0      	sub	sp, #192	@ 0xc0
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005308:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	605a      	str	r2, [r3, #4]
 8005312:	609a      	str	r2, [r3, #8]
 8005314:	60da      	str	r2, [r3, #12]
 8005316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005318:	f107 0318 	add.w	r3, r7, #24
 800531c:	2294      	movs	r2, #148	@ 0x94
 800531e:	2100      	movs	r1, #0
 8005320:	4618      	mov	r0, r3
 8005322:	f000 f9f4 	bl	800570e <memset>
  if(hpcd->Instance==USB)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a39      	ldr	r2, [pc, #228]	@ (8005410 <HAL_PCD_MspInit+0x110>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d16a      	bne.n	8005406 <HAL_PCD_MspInit+0x106>

    /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005330:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005334:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8005336:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800533a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_HSE;
 800533e:	2303      	movs	r3, #3
 8005340:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8005342:	2302      	movs	r3, #2
 8005344:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8005346:	2318      	movs	r3, #24
 8005348:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800534a:	2307      	movs	r3, #7
 800534c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800534e:	2302      	movs	r3, #2
 8005350:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8005352:	2302      	movs	r3, #2
 8005354:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8005356:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800535a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800535c:	f107 0318 	add.w	r3, r7, #24
 8005360:	4618      	mov	r0, r3
 8005362:	f7fc fd99 	bl	8001e98 <HAL_RCCEx_PeriphCLKConfig>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800536c:	f7ff fe5e 	bl	800502c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005370:	4b28      	ldr	r3, [pc, #160]	@ (8005414 <HAL_PCD_MspInit+0x114>)
 8005372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005374:	4a27      	ldr	r2, [pc, #156]	@ (8005414 <HAL_PCD_MspInit+0x114>)
 8005376:	f043 0301 	orr.w	r3, r3, #1
 800537a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800537c:	4b25      	ldr	r3, [pc, #148]	@ (8005414 <HAL_PCD_MspInit+0x114>)
 800537e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	697b      	ldr	r3, [r7, #20]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005388:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800538c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005390:	2302      	movs	r3, #2
 8005392:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005396:	2300      	movs	r3, #0
 8005398:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800539c:	2300      	movs	r3, #0
 800539e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80053a2:	230a      	movs	r3, #10
 80053a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053a8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80053ac:	4619      	mov	r1, r3
 80053ae:	481a      	ldr	r0, [pc, #104]	@ (8005418 <HAL_PCD_MspInit+0x118>)
 80053b0:	f7fb fa18 	bl	80007e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80053b4:	4b17      	ldr	r3, [pc, #92]	@ (8005414 <HAL_PCD_MspInit+0x114>)
 80053b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053b8:	4a16      	ldr	r2, [pc, #88]	@ (8005414 <HAL_PCD_MspInit+0x114>)
 80053ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80053be:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80053c0:	4b14      	ldr	r3, [pc, #80]	@ (8005414 <HAL_PCD_MspInit+0x114>)
 80053c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053cc:	4b11      	ldr	r3, [pc, #68]	@ (8005414 <HAL_PCD_MspInit+0x114>)
 80053ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d114      	bne.n	8005402 <HAL_PCD_MspInit+0x102>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005414 <HAL_PCD_MspInit+0x114>)
 80053da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053dc:	4a0d      	ldr	r2, [pc, #52]	@ (8005414 <HAL_PCD_MspInit+0x114>)
 80053de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80053e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005414 <HAL_PCD_MspInit+0x114>)
 80053e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80053f0:	f7fb fd22 	bl	8000e38 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80053f4:	4b07      	ldr	r3, [pc, #28]	@ (8005414 <HAL_PCD_MspInit+0x114>)
 80053f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f8:	4a06      	ldr	r2, [pc, #24]	@ (8005414 <HAL_PCD_MspInit+0x114>)
 80053fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053fe:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_MspInit 1 */

  }

}
 8005400:	e001      	b.n	8005406 <HAL_PCD_MspInit+0x106>
      HAL_PWREx_EnableVddUSB();
 8005402:	f7fb fd19 	bl	8000e38 <HAL_PWREx_EnableVddUSB>
}
 8005406:	bf00      	nop
 8005408:	37c0      	adds	r7, #192	@ 0xc0
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	4000d400 	.word	0x4000d400
 8005414:	40021000 	.word	0x40021000
 8005418:	42020000 	.word	0x42020000

0800541c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08c      	sub	sp, #48	@ 0x30
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005428:	2300      	movs	r3, #0
 800542a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 800542c:	2200      	movs	r2, #0
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	2032      	movs	r0, #50	@ 0x32
 8005432:	f7fb f9af 	bl	8000794 <HAL_NVIC_SetPriority>
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005436:	2032      	movs	r0, #50	@ 0x32
 8005438:	f7fb f9c6 	bl	80007c8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800543c:	4b1e      	ldr	r3, [pc, #120]	@ (80054b8 <HAL_InitTick+0x9c>)
 800543e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005440:	4a1d      	ldr	r2, [pc, #116]	@ (80054b8 <HAL_InitTick+0x9c>)
 8005442:	f043 0320 	orr.w	r3, r3, #32
 8005446:	6593      	str	r3, [r2, #88]	@ 0x58
 8005448:	4b1b      	ldr	r3, [pc, #108]	@ (80054b8 <HAL_InitTick+0x9c>)
 800544a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800544c:	f003 0320 	and.w	r3, r3, #32
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005454:	f107 0210 	add.w	r2, r7, #16
 8005458:	f107 0314 	add.w	r3, r7, #20
 800545c:	4611      	mov	r1, r2
 800545e:	4618      	mov	r0, r3
 8005460:	f7fc fc16 	bl	8001c90 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005464:	f7fc fbec 	bl	8001c40 <HAL_RCC_GetPCLK1Freq>
 8005468:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800546a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800546c:	4a13      	ldr	r2, [pc, #76]	@ (80054bc <HAL_InitTick+0xa0>)
 800546e:	fba2 2303 	umull	r2, r3, r2, r3
 8005472:	0c9b      	lsrs	r3, r3, #18
 8005474:	3b01      	subs	r3, #1
 8005476:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8005478:	4b11      	ldr	r3, [pc, #68]	@ (80054c0 <HAL_InitTick+0xa4>)
 800547a:	4a12      	ldr	r2, [pc, #72]	@ (80054c4 <HAL_InitTick+0xa8>)
 800547c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800547e:	4b10      	ldr	r3, [pc, #64]	@ (80054c0 <HAL_InitTick+0xa4>)
 8005480:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005484:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8005486:	4a0e      	ldr	r2, [pc, #56]	@ (80054c0 <HAL_InitTick+0xa4>)
 8005488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800548c:	4b0c      	ldr	r3, [pc, #48]	@ (80054c0 <HAL_InitTick+0xa4>)
 800548e:	2200      	movs	r2, #0
 8005490:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005492:	4b0b      	ldr	r3, [pc, #44]	@ (80054c0 <HAL_InitTick+0xa4>)
 8005494:	2200      	movs	r2, #0
 8005496:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8005498:	4809      	ldr	r0, [pc, #36]	@ (80054c0 <HAL_InitTick+0xa4>)
 800549a:	f7fd fa13 	bl	80028c4 <HAL_TIM_Base_Init>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d104      	bne.n	80054ae <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80054a4:	4806      	ldr	r0, [pc, #24]	@ (80054c0 <HAL_InitTick+0xa4>)
 80054a6:	f7fd fa65 	bl	8002974 <HAL_TIM_Base_Start_IT>
 80054aa:	4603      	mov	r3, r0
 80054ac:	e000      	b.n	80054b0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3730      	adds	r7, #48	@ 0x30
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	40021000 	.word	0x40021000
 80054bc:	431bde83 	.word	0x431bde83
 80054c0:	20000480 	.word	0x20000480
 80054c4:	40001400 	.word	0x40001400

080054c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80054cc:	bf00      	nop
 80054ce:	e7fd      	b.n	80054cc <NMI_Handler+0x4>

080054d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054d4:	bf00      	nop
 80054d6:	e7fd      	b.n	80054d4 <HardFault_Handler+0x4>

080054d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80054dc:	bf00      	nop
 80054de:	e7fd      	b.n	80054dc <MemManage_Handler+0x4>

080054e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80054e4:	bf00      	nop
 80054e6:	e7fd      	b.n	80054e4 <BusFault_Handler+0x4>

080054e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80054ec:	bf00      	nop
 80054ee:	e7fd      	b.n	80054ec <UsageFault_Handler+0x4>

080054f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80054f4:	bf00      	nop
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80054fe:	b480      	push	{r7}
 8005500:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005502:	bf00      	nop
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005510:	bf00      	nop
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800551a:	b480      	push	{r7}
 800551c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800551e:	bf00      	nop
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800552c:	4802      	ldr	r0, [pc, #8]	@ (8005538 <TIM7_IRQHandler+0x10>)
 800552e:	f7fd faf2 	bl	8002b16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005532:	bf00      	nop
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20000480 	.word	0x20000480

0800553c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005540:	4b06      	ldr	r3, [pc, #24]	@ (800555c <SystemInit+0x20>)
 8005542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005546:	4a05      	ldr	r2, [pc, #20]	@ (800555c <SystemInit+0x20>)
 8005548:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800554c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8005550:	bf00      	nop
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	e000ed00 	.word	0xe000ed00

08005560 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8005566:	4b4f      	ldr	r3, [pc, #316]	@ (80056a4 <SystemCoreClockUpdate+0x144>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0308 	and.w	r3, r3, #8
 800556e:	2b00      	cmp	r3, #0
 8005570:	d107      	bne.n	8005582 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8005572:	4b4c      	ldr	r3, [pc, #304]	@ (80056a4 <SystemCoreClockUpdate+0x144>)
 8005574:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005578:	0a1b      	lsrs	r3, r3, #8
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	e005      	b.n	800558e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8005582:	4b48      	ldr	r3, [pc, #288]	@ (80056a4 <SystemCoreClockUpdate+0x144>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	091b      	lsrs	r3, r3, #4
 8005588:	f003 030f 	and.w	r3, r3, #15
 800558c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800558e:	4a46      	ldr	r2, [pc, #280]	@ (80056a8 <SystemCoreClockUpdate+0x148>)
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005596:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005598:	4b42      	ldr	r3, [pc, #264]	@ (80056a4 <SystemCoreClockUpdate+0x144>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 030c 	and.w	r3, r3, #12
 80055a0:	2b0c      	cmp	r3, #12
 80055a2:	d866      	bhi.n	8005672 <SystemCoreClockUpdate+0x112>
 80055a4:	a201      	add	r2, pc, #4	@ (adr r2, 80055ac <SystemCoreClockUpdate+0x4c>)
 80055a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055aa:	bf00      	nop
 80055ac:	080055e1 	.word	0x080055e1
 80055b0:	08005673 	.word	0x08005673
 80055b4:	08005673 	.word	0x08005673
 80055b8:	08005673 	.word	0x08005673
 80055bc:	080055e9 	.word	0x080055e9
 80055c0:	08005673 	.word	0x08005673
 80055c4:	08005673 	.word	0x08005673
 80055c8:	08005673 	.word	0x08005673
 80055cc:	080055f1 	.word	0x080055f1
 80055d0:	08005673 	.word	0x08005673
 80055d4:	08005673 	.word	0x08005673
 80055d8:	08005673 	.word	0x08005673
 80055dc:	080055f9 	.word	0x080055f9
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80055e0:	4a32      	ldr	r2, [pc, #200]	@ (80056ac <SystemCoreClockUpdate+0x14c>)
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	6013      	str	r3, [r2, #0]
      break;
 80055e6:	e048      	b.n	800567a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80055e8:	4b30      	ldr	r3, [pc, #192]	@ (80056ac <SystemCoreClockUpdate+0x14c>)
 80055ea:	4a31      	ldr	r2, [pc, #196]	@ (80056b0 <SystemCoreClockUpdate+0x150>)
 80055ec:	601a      	str	r2, [r3, #0]
      break;
 80055ee:	e044      	b.n	800567a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80055f0:	4b2e      	ldr	r3, [pc, #184]	@ (80056ac <SystemCoreClockUpdate+0x14c>)
 80055f2:	4a30      	ldr	r2, [pc, #192]	@ (80056b4 <SystemCoreClockUpdate+0x154>)
 80055f4:	601a      	str	r2, [r3, #0]
      break;
 80055f6:	e040      	b.n	800567a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80055f8:	4b2a      	ldr	r3, [pc, #168]	@ (80056a4 <SystemCoreClockUpdate+0x144>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f003 0303 	and.w	r3, r3, #3
 8005600:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8005602:	4b28      	ldr	r3, [pc, #160]	@ (80056a4 <SystemCoreClockUpdate+0x144>)
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	091b      	lsrs	r3, r3, #4
 8005608:	f003 030f 	and.w	r3, r3, #15
 800560c:	3301      	adds	r3, #1
 800560e:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d003      	beq.n	800561e <SystemCoreClockUpdate+0xbe>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b03      	cmp	r3, #3
 800561a:	d006      	beq.n	800562a <SystemCoreClockUpdate+0xca>
 800561c:	e00b      	b.n	8005636 <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800561e:	4a24      	ldr	r2, [pc, #144]	@ (80056b0 <SystemCoreClockUpdate+0x150>)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	fbb2 f3f3 	udiv	r3, r2, r3
 8005626:	613b      	str	r3, [r7, #16]
          break;
 8005628:	e00b      	b.n	8005642 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800562a:	4a22      	ldr	r2, [pc, #136]	@ (80056b4 <SystemCoreClockUpdate+0x154>)
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005632:	613b      	str	r3, [r7, #16]
          break;
 8005634:	e005      	b.n	8005642 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	fbb2 f3f3 	udiv	r3, r2, r3
 800563e:	613b      	str	r3, [r7, #16]
          break;
 8005640:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8005642:	4b18      	ldr	r3, [pc, #96]	@ (80056a4 <SystemCoreClockUpdate+0x144>)
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	0a1b      	lsrs	r3, r3, #8
 8005648:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	fb02 f303 	mul.w	r3, r2, r3
 8005652:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8005654:	4b13      	ldr	r3, [pc, #76]	@ (80056a4 <SystemCoreClockUpdate+0x144>)
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	0e5b      	lsrs	r3, r3, #25
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	3301      	adds	r3, #1
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	fbb2 f3f3 	udiv	r3, r2, r3
 800566c:	4a0f      	ldr	r2, [pc, #60]	@ (80056ac <SystemCoreClockUpdate+0x14c>)
 800566e:	6013      	str	r3, [r2, #0]
      break;
 8005670:	e003      	b.n	800567a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8005672:	4a0e      	ldr	r2, [pc, #56]	@ (80056ac <SystemCoreClockUpdate+0x14c>)
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	6013      	str	r3, [r2, #0]
      break;
 8005678:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800567a:	4b0a      	ldr	r3, [pc, #40]	@ (80056a4 <SystemCoreClockUpdate+0x144>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	091b      	lsrs	r3, r3, #4
 8005680:	f003 030f 	and.w	r3, r3, #15
 8005684:	4a0c      	ldr	r2, [pc, #48]	@ (80056b8 <SystemCoreClockUpdate+0x158>)
 8005686:	5cd3      	ldrb	r3, [r2, r3]
 8005688:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800568a:	4b08      	ldr	r3, [pc, #32]	@ (80056ac <SystemCoreClockUpdate+0x14c>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
 8005694:	4a05      	ldr	r2, [pc, #20]	@ (80056ac <SystemCoreClockUpdate+0x14c>)
 8005696:	6013      	str	r3, [r2, #0]
}
 8005698:	bf00      	nop
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	40021000 	.word	0x40021000
 80056a8:	080057c0 	.word	0x080057c0
 80056ac:	20000008 	.word	0x20000008
 80056b0:	00f42400 	.word	0x00f42400
 80056b4:	007a1200 	.word	0x007a1200
 80056b8:	080057a8 	.word	0x080057a8

080056bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80056bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80056f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80056c0:	f7ff ff3c 	bl	800553c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80056c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80056c6:	e003      	b.n	80056d0 <LoopCopyDataInit>

080056c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80056c8:	4b0b      	ldr	r3, [pc, #44]	@ (80056f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80056ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80056cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80056ce:	3104      	adds	r1, #4

080056d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80056d0:	480a      	ldr	r0, [pc, #40]	@ (80056fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80056d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005700 <LoopForever+0xe>)
	adds	r2, r0, r1
 80056d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80056d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80056d8:	d3f6      	bcc.n	80056c8 <CopyDataInit>
	ldr	r2, =_sbss
 80056da:	4a0a      	ldr	r2, [pc, #40]	@ (8005704 <LoopForever+0x12>)
	b	LoopFillZerobss
 80056dc:	e002      	b.n	80056e4 <LoopFillZerobss>

080056de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80056de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80056e0:	f842 3b04 	str.w	r3, [r2], #4

080056e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80056e4:	4b08      	ldr	r3, [pc, #32]	@ (8005708 <LoopForever+0x16>)
	cmp	r2, r3
 80056e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80056e8:	d3f9      	bcc.n	80056de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80056ea:	f000 f819 	bl	8005720 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80056ee:	f7ff f914 	bl	800491a <main>

080056f2 <LoopForever>:

LoopForever:
    b LoopForever
 80056f2:	e7fe      	b.n	80056f2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80056f4:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80056f8:	08005810 	.word	0x08005810
	ldr	r0, =_sdata
 80056fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005700:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8005704:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8005708:	200004cc 	.word	0x200004cc

0800570c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800570c:	e7fe      	b.n	800570c <ADC1_2_IRQHandler>

0800570e <memset>:
 800570e:	4402      	add	r2, r0
 8005710:	4603      	mov	r3, r0
 8005712:	4293      	cmp	r3, r2
 8005714:	d100      	bne.n	8005718 <memset+0xa>
 8005716:	4770      	bx	lr
 8005718:	f803 1b01 	strb.w	r1, [r3], #1
 800571c:	e7f9      	b.n	8005712 <memset+0x4>
	...

08005720 <__libc_init_array>:
 8005720:	b570      	push	{r4, r5, r6, lr}
 8005722:	4d0d      	ldr	r5, [pc, #52]	@ (8005758 <__libc_init_array+0x38>)
 8005724:	2600      	movs	r6, #0
 8005726:	4c0d      	ldr	r4, [pc, #52]	@ (800575c <__libc_init_array+0x3c>)
 8005728:	1b64      	subs	r4, r4, r5
 800572a:	10a4      	asrs	r4, r4, #2
 800572c:	42a6      	cmp	r6, r4
 800572e:	d109      	bne.n	8005744 <__libc_init_array+0x24>
 8005730:	4d0b      	ldr	r5, [pc, #44]	@ (8005760 <__libc_init_array+0x40>)
 8005732:	2600      	movs	r6, #0
 8005734:	4c0b      	ldr	r4, [pc, #44]	@ (8005764 <__libc_init_array+0x44>)
 8005736:	f000 f817 	bl	8005768 <_init>
 800573a:	1b64      	subs	r4, r4, r5
 800573c:	10a4      	asrs	r4, r4, #2
 800573e:	42a6      	cmp	r6, r4
 8005740:	d105      	bne.n	800574e <__libc_init_array+0x2e>
 8005742:	bd70      	pop	{r4, r5, r6, pc}
 8005744:	f855 3b04 	ldr.w	r3, [r5], #4
 8005748:	3601      	adds	r6, #1
 800574a:	4798      	blx	r3
 800574c:	e7ee      	b.n	800572c <__libc_init_array+0xc>
 800574e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005752:	3601      	adds	r6, #1
 8005754:	4798      	blx	r3
 8005756:	e7f2      	b.n	800573e <__libc_init_array+0x1e>
 8005758:	08005808 	.word	0x08005808
 800575c:	08005808 	.word	0x08005808
 8005760:	08005808 	.word	0x08005808
 8005764:	0800580c 	.word	0x0800580c

08005768 <_init>:
 8005768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576a:	bf00      	nop
 800576c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576e:	bc08      	pop	{r3}
 8005770:	469e      	mov	lr, r3
 8005772:	4770      	bx	lr

08005774 <_fini>:
 8005774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005776:	bf00      	nop
 8005778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800577a:	bc08      	pop	{r3}
 800577c:	469e      	mov	lr, r3
 800577e:	4770      	bx	lr
